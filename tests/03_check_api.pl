#!/usr/bin/env perl
use strict;
use warnings;
use utf8;
use LWP::UserAgent;
use JSON;
use HTTP::Request;
use Time::HiRes qw(time);

=head1 NAME

03_check_api.pl - –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ MegaChat

=head1 DESCRIPTION

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ REST API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è MegaChat.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.

=cut

print "üåê –ü–†–û–í–ï–†–ö–ê API –≠–ù–î–ü–û–ò–ù–¢–û–í MEGACHAT\n";
print "=" x 50 . "\n\n";

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
my $base_url = 'http://localhost:3000';
my $timeout = 10;

# –°–æ–∑–¥–∞–Ω–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞
my $ua = LWP::UserAgent->new(
    timeout => $timeout,
    agent => 'MegaChat-API-Tester/1.0'
);

my $json = JSON->new->utf8;

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
print "üîå –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–ï–†–í–ï–†–ê:\n";
print "   URL: $base_url\n";

my $start_time = time();
my $response = $ua->get($base_url);
my $response_time = sprintf("%.3f", time() - $start_time);

if ($response->is_success) {
    print "   ‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω (–≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${response_time}—Å)\n";
    print "   üìÑ Content-Type: " . ($response->header('Content-Type') || '–Ω–µ —É–∫–∞–∑–∞–Ω') . "\n";
} else {
    print "   ‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: " . $response->status_line . "\n";
    print "   üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ: perl megachat.pl\n";
    exit 1;
}
print "\n";

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ API
my @api_tests = (
    {
        name => '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞',
        method => 'GET',
        url => '/',
        expected_status => 200,
        content_check => sub { $_[0] =~ /MegaChat|html/i }
    },
    {
        name => '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–±–µ–∑ –ª–æ–≥–∏–Ω–∞)',
        method => 'GET', 
        url => '/api/auth/check',
        expected_status => 200,
        json_response => 1,
        content_check => sub { 
            my $data = eval { $json->decode($_[0]) };
            return $data && exists $data->{success};
        }
    },
    {
        name => '–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        method => 'GET',
        url => '/api/users/search?q=admin',
        expected_status => 200,
        json_response => 1,
        content_check => sub {
            my $data = eval { $json->decode($_[0]) };
            return $data && ref($data) eq 'ARRAY';
        }
    },
    {
        name => '–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)',
        method => 'GET',
        url => '/api/conversations',
        expected_status => [200, 401], # –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏ unauthorized
        json_response => 1
    },
    {
        name => '–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π',
        method => 'GET',
        url => '/api/messages/search?q=test&conversation_id=1',
        expected_status => [200, 404],
        json_response => 1
    },
    {
        name => '–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫',
        method => 'GET',
        url => '/api/notes',
        expected_status => [200, 401],
        json_response => 1
    },
    {
        name => '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞',
        method => 'GET',
        url => '/login',
        expected_status => 200,
        content_check => sub { $_[0] =~ /login|–≤—Ö–æ–¥/i }
    },
    {
        name => '–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        method => 'GET',
        url => '/register', 
        expected_status => 200,
        content_check => sub { $_[0] =~ /register|—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/i }
    },
    {
        name => '–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞',
        method => 'GET',
        url => '/nonexistent-page',
        expected_status => 404
    }
);

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ API
print "üß™ –í–´–ü–û–õ–ù–ï–ù–ò–ï –¢–ï–°–¢–û–í API:\n";
my $total_tests = scalar @api_tests;
my $passed_tests = 0;
my $total_time = 0;

foreach my $test (@api_tests) {
    print "   $test->{name}: ";
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    my $start = time();
    my $req_response;
    
    if ($test->{method} eq 'GET') {
        $req_response = $ua->get($base_url . $test->{url});
    } elsif ($test->{method} eq 'POST') {
        my $req = HTTP::Request->new('POST', $base_url . $test->{url});
        $req->header('Content-Type' => 'application/json') if $test->{json_request};
        $req->content($test->{data} || '');
        $req_response = $ua->request($req);
    }
    
    my $test_time = sprintf("%.3f", time() - $start);
    $total_time += $test_time;
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    my $status_ok = 0;
    if (ref($test->{expected_status}) eq 'ARRAY') {
        $status_ok = grep { $_ == $req_response->code } @{$test->{expected_status}};
    } else {
        $status_ok = $req_response->code == $test->{expected_status};
    }
    
    if (!$status_ok) {
        print "‚ùå FAIL (—Å—Ç–∞—Ç—É—Å: " . $req_response->code . ", –æ–∂–∏–¥–∞–ª—Å—è: " . 
              (ref($test->{expected_status}) ? join('/', @{$test->{expected_status}}) : $test->{expected_status}) . 
              ", –≤—Ä–µ–º—è: ${test_time}—Å)\n";
        next;
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    my $content_ok = 1;
    if ($test->{content_check}) {
        $content_ok = $test->{content_check}->($req_response->content);
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ JSON —Ñ–æ—Ä–º–∞—Ç–∞
    if ($test->{json_response} && $req_response->is_success) {
        eval { $json->decode($req_response->content) };
        if ($@) {
            print "‚ùå FAIL (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON, –≤—Ä–µ–º—è: ${test_time}—Å)\n";
            next;
        }
    }
    
    if ($content_ok) {
        print "‚úÖ PASS (–≤—Ä–µ–º—è: ${test_time}—Å)\n";
        $passed_tests++;
    } else {
        print "‚ùå FAIL (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –≤—Ä–µ–º—è: ${test_time}—Å)\n";
    }
}

print "\n";

# –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
print "‚ö° –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:\n";

my $perf_tests = [
    { url => '/api/auth/check', requests => 10 },
    { url => '/api/users/search?q=a', requests => 5 },
    { url => '/', requests => 3 }
];

foreach my $perf (@$perf_tests) {
    print "   $perf->{url} ($perf->{requests} –∑–∞–ø—Ä–æ—Å–æ–≤): ";
    
    my $perf_start = time();
    my $success_count = 0;
    
    for (1..$perf->{requests}) {
        my $resp = $ua->get($base_url . $perf->{url});
        $success_count++ if $resp->is_success;
    }
    
    my $perf_time = time() - $perf_start;
    my $avg_time = sprintf("%.3f", $perf_time / $perf->{requests});
    my $rps = sprintf("%.1f", $perf->{requests} / $perf_time);
    
    if ($success_count == $perf->{requests}) {
        print "‚úÖ —Å—Ä–µ–¥–Ω–µ–µ: ${avg_time}—Å, RPS: $rps\n";
    } else {
        print "‚ö†Ô∏è  —É—Å–ø–µ—à–Ω–æ: $success_count/$perf->{requests}, —Å—Ä–µ–¥–Ω–µ–µ: ${avg_time}—Å\n";
    }
}

# –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
print "\nüìÅ –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–ò–ß–ï–°–ö–ò–• –§–ê–ô–õ–û–í:\n";

my @static_files = (
    '/static/css/main.css',
    '/static/js/main.js',
    '/static/js/chat.js',
    '/static/js/ui.js'
);

foreach my $file (@static_files) {
    print "   $file: ";
    my $resp = $ua->get($base_url . $file);
    
    if ($resp->is_success) {
        my $size = length($resp->content);
        print "‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω (—Ä–∞–∑–º–µ—Ä: $size –±–∞–π—Ç)\n";
    } else {
        print "‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (" . $resp->status_line . ")\n";
    }
}

# –¢–µ—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
print "\nüîí –ü–†–û–í–ï–†–ö–ê –ó–ê–ì–û–õ–û–í–ö–û–í –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:\n";

my $security_resp = $ua->get($base_url);
my $headers = $security_resp->headers;

my @security_headers = (
    'X-Frame-Options',
    'X-XSS-Protection', 
    'X-Content-Type-Options',
    'Strict-Transport-Security',
    'Content-Security-Policy'
);

foreach my $header (@security_headers) {
    my $value = $headers->header($header);
    if ($value) {
        print "   $header: ‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ($value)\n";
    } else {
        print "   $header: ‚ö†Ô∏è  –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n";
    }
}

print "\nüìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:\n";
print "=" x 30 . "\n";

my $avg_response_time = sprintf("%.3f", $total_time / $total_tests);

print "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n";
print "   –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: $passed_tests/$total_tests\n";
print "   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: " . sprintf("%.1f", ($passed_tests/$total_tests)*100) . "%\n";
print "   –û–±—â–µ–µ –≤—Ä–µ–º—è: " . sprintf("%.3f", $total_time) . "—Å\n";
print "   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${avg_response_time}—Å\n\n";

if ($passed_tests == $total_tests) {
    print "üéâ –í–°–ï API –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!\n";
    print "   API –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.\n";
    exit 0;
} elsif ($passed_tests >= $total_tests * 0.8) {
    print "‚ö†Ô∏è  –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û\n";
    print "   API —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç —Å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏.\n";
    exit 0;
} else {
    print "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° API!\n";
    print "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞.\n";
    exit 1;
}

__END__

=head1 USAGE

    # –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    cd megachat
    perl megachat.pl &
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç
    perl tests/03_check_api.pl

=head1 DEPENDENCIES

    LWP::UserAgent
    JSON  
    HTTP::Request
    Time::HiRes

=head1 AUTHOR

MegaChat Project

=cut
