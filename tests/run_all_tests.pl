#!/usr/bin/env perl
use strict;
use warnings;
use utf8;
use File::Spec;
use File::Basename;
use Cwd;
use POSIX qw(strftime);

=head1 NAME

run_all_tests.pl - –ì–ª–∞–≤–Ω—ã–π —Ç–µ—Å—Ç-—Ä–∞–Ω–Ω–µ—Ä –¥–ª—è MegaChat

=head1 DESCRIPTION

–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ MegaChat –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ,
—Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç
—É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

=cut

# –í–∫–ª—é—á–∞–µ–º UTF-8 –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
binmode(STDOUT, ":encoding(UTF-8)");
binmode(STDERR, ":encoding(UTF-8)");

print "üß™ MEGACHAT - –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï\n";
print "=" x 60 . "\n\n";

# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ç–µ—Å—Ç–∞–º–∏
my $script_dir = dirname(File::Spec->rel2abs($0));
my $project_root = dirname($script_dir);

print "üìÅ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–ï–ö–¢–ï:\n";
print "   –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $project_root\n";
print "   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤: $script_dir\n";
print "   –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: " . strftime("%Y-%m-%d %H:%M:%S", localtime) . "\n\n";

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
chdir($project_root) or die "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞: $!";
print "   ‚úÖ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: " . getcwd() . "\n\n";

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
my @tests = (
    {
        name => '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
        file => '01_check_components.pl',
        description => '–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö Perl –º–æ–¥—É–ª–µ–π –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
        critical => 1
    },
    {
        name => '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        file => '02_check_database.pl', 
        description => '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ SQLite –ë–î',
        critical => 1
    },
    {
        name => '–ü—Ä–æ–≤–µ—Ä–∫–∞ API',
        file => '03_check_api.pl',
        description => '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ REST API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤',
        critical => 0,
        requires_server => 1
    },
    {
        name => '–ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket',
        file => '04_check_websocket.pl',
        description => '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
        critical => 0,
        requires_server => 1
    },
    {
        name => '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
        file => '05_check_auth.pl',
        description => '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        critical => 0,
        requires_server => 1
    }
);

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
my %options = (
    verbose => 0,
    skip_server_tests => 0,
    quick => 0,
    help => 0
);

foreach my $arg (@ARGV) {
    if ($arg eq '--verbose' || $arg eq '-v') {
        $options{verbose} = 1;
    } elsif ($arg eq '--skip-server' || $arg eq '-s') {
        $options{skip_server_tests} = 1;
    } elsif ($arg eq '--quick' || $arg eq '-q') {
        $options{quick} = 1;
    } elsif ($arg eq '--help' || $arg eq '-h') {
        $options{help} = 1;
    }
}

if ($options{help}) {
    print_help();
    exit 0;
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
print "üîç –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –¢–ï–°–¢–û–í:\n";
my @available_tests;

foreach my $test (@tests) {
    my $test_path = File::Spec->catfile($script_dir, $test->{file});
    if (-f $test_path && -r $test_path) {
        push @available_tests, $test;
        print "   ‚úÖ $test->{name}\n";
    } else {
        print "   ‚ùå $test->{name} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $test_path\n";
    }
}

print "\n   üìä –î–æ—Å—Ç—É–ø–Ω–æ —Ç–µ—Å—Ç–æ–≤: " . scalar(@available_tests) . "/" . scalar(@tests) . "\n\n";

if (!@available_tests) {
    print "‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!\n";
    exit 1;
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä (–¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Ç—Ä–µ–±—É—é—â–∏—Ö —Å–µ—Ä–≤–µ—Ä)
my $server_running = 0;
if (!$options{skip_server_tests}) {
    print "üåê –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –°–ï–†–í–ï–†–ê:\n";
    
    eval {
        require IO::Socket::INET;
        my $socket = IO::Socket::INET->new(
            PeerHost => 'localhost',
            PeerPort => 3000,
            Proto    => 'tcp',
            Timeout  => 3
        );
        if ($socket) {
            $server_running = 1;
            close($socket);
        }
    };
    
    if ($server_running) {
        print "   ‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:3000\n";
    } else {
        print "   ‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω\n";
        print "   üí° –¢–µ—Å—Ç—ã —Ç—Ä–µ–±—É—é—â–∏–µ —Å–µ—Ä–≤–µ—Ä –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã\n";
        print "   üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: perl megachat.pl\n";
    }
    print "\n";
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
print "üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í:\n";
print "=" x 40 . "\n\n";

my $start_time = time();
my @results;

foreach my $test (@available_tests) {
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Ç—Ä–µ–±—É—é—â–∏–µ —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω
    if ($test->{requires_server} && !$server_running) {
        print "‚è≠Ô∏è  –ü–†–û–ü–£–°–ö: $test->{name} (—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω)\n\n";
        push @results, {
            test => $test,
            status => 'skipped',
            reason => 'server not running'
        };
        next;
    }
    
    print "üî¨ –ó–ê–ü–£–°–ö: $test->{name}\n";
    print "   –û–ø–∏—Å–∞–Ω–∏–µ: $test->{description}\n";
    
    my $test_path = File::Spec->catfile($script_dir, $test->{file});
    my $test_start = time();
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    my $output = '';
    my $exit_code;
    
    if ($options{verbose}) {
        print "   –ö–æ–º–∞–Ω–¥–∞: perl $test_path\n";
        $exit_code = system("perl", $test_path);
    } else {
        # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥
        $output = `perl "$test_path" 2>&1`;
        $exit_code = $?;
    }
    
    my $test_time = sprintf("%.2f", time() - $test_start);
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    my $success = ($exit_code == 0);
    my $status = $success ? 'passed' : 'failed';
    
    if ($success) {
        print "   ‚úÖ –ü–†–û–ô–î–ï–ù –∑–∞ ${test_time}—Å\n";
    } else {
        print "   ‚ùå –ü–†–û–í–ê–õ–ï–ù –∑–∞ ${test_time}—Å (–∫–æ–¥: $exit_code)\n";
        
        if (!$options{verbose} && $output) {
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–¥–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            my @lines = split(/\n/, $output);
            my $show_lines = 5;
            if (@lines > $show_lines) {
                print "   üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–¥–∞:\n";
                foreach my $line (@lines[-$show_lines..-1]) {
                    print "      $line\n";
                }
            } else {
                print "   üìã –í—ã–≤–æ–¥ —Ç–µ—Å—Ç–∞:\n";
                foreach my $line (@lines) {
                    print "      $line\n";
                }
            }
        }
    }
    
    push @results, {
        test => $test,
        status => $status,
        time => $test_time,
        exit_code => $exit_code,
        output => $output
    };
    
    print "\n";
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö (–µ—Å–ª–∏ –Ω–µ quick —Ä–µ–∂–∏–º)
    if (!$success && $test->{critical} && !$options{quick}) {
        print "üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê!\n";
        print "   –¢–µ—Å—Ç '$test->{name}' —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –∏ –ø—Ä–æ–≤–∞–ª–µ–Ω.\n";
        print "   –î–∞–ª—å–Ω–µ–π—à–µ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n\n";
        last;
    }
}

my $total_time = sprintf("%.2f", time() - $start_time);

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
print "üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢\n";
print "=" x 50 . "\n\n";

my $total_tests = scalar(@results);
my $passed = grep { $_->{status} eq 'passed' } @results;
my $failed = grep { $_->{status} eq 'failed' } @results;
my $skipped = grep { $_->{status} eq 'skipped' } @results;

print "üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n";
print "   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $total_tests\n";
print "   –ü—Ä–æ–π–¥–µ–Ω–æ: $passed ‚úÖ\n";
print "   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $failed ‚ùå\n";
print "   –ü—Ä–æ–ø—É—â–µ–Ω–æ: $skipped ‚è≠Ô∏è\n";
print "   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${total_time}—Å\n";
print "   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: " . sprintf("%.1f", ($passed/($total_tests-$skipped))*100) . "%\n\n" if ($total_tests - $skipped) > 0;

# –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
print "üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:\n";
foreach my $result (@results) {
    my $icon = $result->{status} eq 'passed' ? '‚úÖ' : 
               $result->{status} eq 'failed' ? '‚ùå' : '‚è≠Ô∏è';
    
    printf "   %s %-30s %s", $icon, $result->{test}->{name}, 
           $result->{status} eq 'skipped' ? "($result->{reason})" : 
           $result->{time} ? "(${result->{time}}—Å)" : "";
    print "\n";
}

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
print "\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n";

if ($failed > 0) {
    print "   üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º\n";
    
    my @critical_failed = grep { $_->{status} eq 'failed' && $_->{test}->{critical} } @results;
    if (@critical_failed) {
        print "   ‚ö†Ô∏è  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å\n";
    }
}

if ($skipped > 0) {
    print "   üåê –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: perl megachat.pl\n";
}

if ($passed == $total_tests) {
    print "   üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n";
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥-—Ñ–∞–π–ª–∞
my $log_file = File::Spec->catfile($script_dir, 'test_results.log');
write_log_file($log_file, \@results, $total_time);
print "\nüìù –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $log_file\n";

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
my $exit_status = 0;
if ($failed > 0) {
    my @critical_failed = grep { $_->{status} eq 'failed' && $_->{test}->{critical} } @results;
    $exit_status = @critical_failed ? 2 : 1;
}

print "\n" . "=" x 60 . "\n";
if ($exit_status == 0) {
    print "üéä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!\n";
} elsif ($exit_status == 1) {
    print "‚ö†Ô∏è  –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò\n";
} else {
    print "üí• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ú–ò –û–®–ò–ë–ö–ê–ú–ò!\n";
}

exit $exit_status;

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

sub print_help {
    print <<'HELP';
üß™ MegaChat Test Runner - –°–ø—Ä–∞–≤–∫–∞

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    perl run_all_tests.pl [–û–ü–¶–ò–ò]

–û–ü–¶–ò–ò:
    -h, --help          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
    -v, --verbose       –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    -s, --skip-server   –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Ç—Ä–µ–±—É—é—â–∏–µ —Å–µ—Ä–≤–µ—Ä
    -q, --quick         –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º (–Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö)

–ü–†–ò–ú–ï–†–´:
    perl run_all_tests.pl                    # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫
    perl run_all_tests.pl --verbose          # –° –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    perl run_all_tests.pl --skip-server      # –ë–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    perl run_all_tests.pl -v -q              # –ü–æ–¥—Ä–æ–±–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ

–û–ü–ò–°–ê–ù–ò–ï –¢–ï–°–¢–û–í:
    01_check_components.pl    –ü—Ä–æ–≤–µ—Ä–∫–∞ Perl –º–æ–¥—É–ª–µ–π
    02_check_database.pl      –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö  
    03_check_api.pl          –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
    04_check_websocket.pl    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket
    05_check_auth.pl         –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

–ö–û–î–´ –í–û–ó–í–†–ê–¢–ê:
    0    –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã
    1    –ù–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    2    –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏

HELP
}

sub write_log_file {
    my ($log_file, $results, $total_time) = @_;
    
    open my $fh, '>:encoding(UTF-8)', $log_file or return;
    
    print $fh "MegaChat Test Results\n";
    print $fh "=====================\n";
    print $fh "Timestamp: " . strftime("%Y-%m-%d %H:%M:%S", localtime) . "\n";
    print $fh "Total Time: ${total_time}s\n\n";
    
    foreach my $result (@$results) {
        print $fh "Test: $result->{test}->{name}\n";
        print $fh "File: $result->{test}->{file}\n";
        print $fh "Status: $result->{status}\n";
        print $fh "Time: " . ($result->{time} || 'N/A') . "s\n";
        if ($result->{exit_code}) {
            print $fh "Exit Code: $result->{exit_code}\n";
        }
        if ($result->{output}) {
            print $fh "Output:\n$result->{output}\n";
        }
        print $fh "\n" . "-" x 50 . "\n\n";
    }
    
    close $fh;
}

__END__

=head1 USAGE

    cd megachat
    perl tests/run_all_tests.pl [options]

=head1 OPTIONS

    --verbose     –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
    --skip-server –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ç–µ—Å—Ç—ã  
    --quick       –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
    --help        –°–ø—Ä–∞–≤–∫–∞

=head1 AUTHOR

MegaChat Project

=cut
