#!/usr/bin/env perl
use strict;
use warnings;
use utf8;
use LWP::UserAgent;
use HTTP::Request;
use HTTP::Cookies;
use JSON;
use Time::HiRes qw(time);

=head1 NAME

05_check_auth.pl - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ MegaChat

=head1 DESCRIPTION

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –≤—Ö–æ–¥, –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Å—Å–∏–π,
–∑–∞—â–∏—Ç—É —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.

=cut

print "üîê –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò MEGACHAT\n";
print "=" x 50 . "\n\n";

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
my $base_url = 'http://localhost:3000';
my $timeout = 10;

# –°–æ–∑–¥–∞–Ω–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π cookies
my $ua = LWP::UserAgent->new(
    timeout => $timeout,
    agent => 'MegaChat-Auth-Tester/1.0',
    cookie_jar => HTTP::Cookies->new()
);

my $json = JSON->new->utf8;

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
my $test_user = {
    username => 'test_auth_user_' . time(),
    email => 'test_auth_' . time() . '@example.com',
    password => 'test_password_123'
};

my $invalid_user = {
    username => 'nonexistent_user',
    password => 'wrong_password'
};

print "üìã –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï:\n";
print "   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $test_user->{username}\n";
print "   Email: $test_user->{email}\n";
print "   –ü–∞—Ä–æ–ª—å: [—Å–∫—Ä—ã—Ç]\n\n";

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
print "üåê –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–ï–†–í–ï–†–ê:\n";
my $response = $ua->get($base_url);
if (!$response->is_success) {
    print "   ‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: " . $response->status_line . "\n";
    exit 1;
}
print "   ‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω\n\n";

# –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–±–µ–∑ –≤—Ö–æ–¥–∞)
print "üîç –ü–†–û–í–ï–†–ö–ê –ù–ê–ß–ê–õ–¨–ù–û–ì–û –°–¢–ê–¢–£–°–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò:\n";
my $check_resp = $ua->get("$base_url/api/auth/check");

if ($check_resp->is_success) {
    my $data = eval { $json->decode($check_resp->content) };
    if ($data && exists $data->{success}) {
        if ($data->{success}) {
            print "   ‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: $data->{user}->{username}\n";
            print "   üí° –î–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ logout\n";
        } else {
            print "   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)\n";
        }
    } else {
        print "   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API\n";
    }
} else {
    print "   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: " . $check_resp->status_line . "\n";
}

# –¢–µ—Å—Ç 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
print "\nüìù –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò:\n";

print "   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ";
my $register_req = HTTP::Request->new('POST', "$base_url/register");
$register_req->header('Content-Type' => 'application/x-www-form-urlencoded');
$register_req->content(
    "username=$test_user->{username}&" .
    "email=$test_user->{email}&" .
    "password=$test_user->{password}&" .
    "confirm_password=$test_user->{password}"
);

my $register_resp = $ua->request($register_req);

if ($register_resp->is_success || $register_resp->code == 302) {
    print "‚úÖ —É—Å–ø–µ—à–Ω–æ\n";
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
    if ($register_resp->code == 302) {
        my $location = $register_resp->header('Location');
        print "      –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞: $location\n";
    }
} else {
    print "‚ùå –æ—à–∏–±–∫–∞ (" . $register_resp->status_line . ")\n";
    if ($register_resp->content =~ /—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç|already exists/i) {
        print "      –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n";
    }
}

# –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
print "   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: ";
my $bad_register_req = HTTP::Request->new('POST', "$base_url/register");
$bad_register_req->header('Content-Type' => 'application/x-www-form-urlencoded');
$bad_register_req->content("username=ab&email=bad&password=123");

my $bad_register_resp = $ua->request($bad_register_req);

if ($bad_register_resp->is_success && $bad_register_resp->content =~ /–æ—à–∏–±–∫–∞|error/i) {
    print "‚úÖ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n";
} elsif (!$bad_register_resp->is_success) {
    print "‚úÖ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–æ–º\n";
} else {
    print "‚ö†Ô∏è  –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞ (—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏)\n";
}

# –¢–µ—Å—Ç 3: –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
print "\nüö™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–•–û–î–ê –í –°–ò–°–¢–ï–ú–£:\n";

# –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
print "   –í—Ö–æ–¥ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: ";
my $bad_login_req = HTTP::Request->new('POST', "$base_url/login");
$bad_login_req->header('Content-Type' => 'application/x-www-form-urlencoded');
$bad_login_req->content("username=$invalid_user->{username}&password=$invalid_user->{password}");

my $bad_login_resp = $ua->request($bad_login_req);

if ($bad_login_resp->content =~ /–Ω–µ–≤–µ—Ä–Ω|incorrect|invalid/i || !$bad_login_resp->is_success) {
    print "‚úÖ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω\n";
} else {
    print "‚ö†Ô∏è  –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç (–ø—Ä–æ–±–ª–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)\n";
}

# –í—Ö–æ–¥ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
print "   –í—Ö–æ–¥ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: ";
my $login_req = HTTP::Request->new('POST', "$base_url/login");
$login_req->header('Content-Type' => 'application/x-www-form-urlencoded');
$login_req->content("username=$test_user->{username}&password=$test_user->{password}");

my $login_resp = $ua->request($login_req);

my $login_success = 0;
if ($login_resp->is_success || $login_resp->code == 302) {
    print "‚úÖ —É—Å–ø–µ—à–Ω–æ\n";
    $login_success = 1;
    
    if ($login_resp->code == 302) {
        my $location = $login_resp->header('Location');
        print "      –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞: $location\n";
    }
} else {
    print "‚ùå –æ—à–∏–±–∫–∞ (" . $login_resp->status_line . ")\n";
    print "      –í–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω\n";
}

# –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
if ($login_success) {
    print "\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ê–í–¢–û–†–ò–ó–û–í–ê–ù–ù–û–ì–û –°–¢–ê–¢–£–°–ê:\n";
    
    my $auth_check_resp = $ua->get("$base_url/api/auth/check");
    
    if ($auth_check_resp->is_success) {
        my $data = eval { $json->decode($auth_check_resp->content) };
        
        if ($data && $data->{success} && $data->{user}) {
            print "   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: $data->{user}->{username}\n";
            print "   üìä User ID: $data->{user}->{id}\n";
            print "   üìß Email: " . ($data->{user}->{email} || '–Ω–µ —É–∫–∞–∑–∞–Ω') . "\n";
        } else {
            print "   ‚ùå –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π\n";
            $login_success = 0;
        }
    } else {
        print "   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞\n";
        $login_success = 0;
    }
}

# –¢–µ—Å—Ç 5: –î–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º
if ($login_success) {
    print "\nüîí –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ö –ó–ê–©–ò–©–ï–ù–ù–´–ú –≠–ù–î–ü–û–ò–ù–¢–ê–ú:\n";
    
    my @protected_endpoints = (
        '/api/conversations',
        '/api/notes',
        '/api/users/search?q=test'
    );
    
    foreach my $endpoint (@protected_endpoints) {
        print "   $endpoint: ";
        my $resp = $ua->get("$base_url$endpoint");
        
        if ($resp->is_success) {
            print "‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω\n";
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ JSON –æ—Ç–≤–µ—Ç
            if ($resp->header('Content-Type') && $resp->header('Content-Type') =~ /json/) {
                my $data = eval { $json->decode($resp->content) };
                if ($data) {
                    print "      JSON –≤–∞–ª–∏–¥–µ–Ω\n";
                } else {
                    print "      ‚ö†Ô∏è  JSON –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω\n";
                }
            }
        } else {
            print "‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (" . $resp->status_line . ")\n";
        }
    }
}

# –¢–µ—Å—Ç 6: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞ (–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
if ($login_success) {
    print "\nüí¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –ß–ê–¢–ê:\n";
    
    print "   –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞: ";
    my $chat_req = HTTP::Request->new('POST', "$base_url/api/conversations");
    $chat_req->header('Content-Type' => 'application/json');
    $chat_req->content($json->encode({
        name => "Test Chat " . time(),
        description => "–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
        participants => []
    }));
    
    my $chat_resp = $ua->request($chat_req);
    
    if ($chat_resp->is_success) {
        my $data = eval { $json->decode($chat_resp->content) };
        if ($data && $data->{success}) {
            print "‚úÖ —Å–æ–∑–¥–∞–Ω (ID: $data->{id})\n";
        } else {
            print "‚ö†Ô∏è  –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ—è—Å–µ–Ω\n";
        }
    } else {
        print "‚ùå –æ—à–∏–±–∫–∞ (" . $chat_resp->status_line . ")\n";
    }
}

# –¢–µ—Å—Ç 7: –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
if ($login_success) {
    print "\nüö™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–•–û–î–ê –ò–ó –°–ò–°–¢–ï–ú–´:\n";
    
    print "   –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ logout: ";
    my $logout_resp = $ua->post("$base_url/api/auth/logout");
    
    if ($logout_resp->is_success || $logout_resp->code == 302) {
        print "‚úÖ —É—Å–ø–µ—à–Ω–æ\n";
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞
        print "   –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ";
        my $check_after_logout = $ua->get("$base_url/api/auth/check");
        
        if ($check_after_logout->is_success) {
            my $data = eval { $json->decode($check_after_logout->content) };
            if ($data && !$data->{success}) {
                print "‚úÖ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞\n";
            } else {
                print "‚ö†Ô∏è  –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Å–±—Ä–æ—à–µ–Ω–∞\n";
            }
        }
    } else {
        print "‚ùå –æ—à–∏–±–∫–∞ (" . $logout_resp->status_line . ")\n";
    }
}

# –¢–µ—Å—Ç 8: –î–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º –ø–æ—Å–ª–µ logout
print "\nüîê –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ò–†–û–í–ö–ò –ü–û–°–õ–ï LOGOUT:\n";

my $protected_test = $ua->get("$base_url/api/conversations");
if (!$protected_test->is_success || $protected_test->code == 401) {
    print "   ‚úÖ –î–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n";
} else {
    print "   ‚ö†Ô∏è  –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n";
}

# –¢–µ—Å—Ç 9: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π
print "\nüõ°Ô∏è  –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –°–ï–°–°–ò–ô:\n";

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
my $security_resp = $ua->get($base_url);
my $headers = $security_resp->headers;

print "   Secure cookies: ";
my $set_cookie = $headers->header('Set-Cookie') || '';
if ($set_cookie =~ /Secure/i) {
    print "‚úÖ –≤–∫–ª—é—á–µ–Ω—ã\n";
} else {
    print "‚ö†Ô∏è  –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è HTTPS)\n";
}

print "   HttpOnly cookies: ";
if ($set_cookie =~ /HttpOnly/i) {
    print "‚úÖ –≤–∫–ª—é—á–µ–Ω—ã\n";
} else {
    print "‚ö†Ô∏è  –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)\n";
}

# –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
print "\n‚ö° –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò:\n";

print "   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:\n";

# –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
my $start_time = time();
for (1..5) {
    $ua->get("$base_url/api/auth/check");
}
my $auth_check_time = sprintf("%.3f", (time() - $start_time) / 5);
print "      –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${auth_check_time}—Å\n";

# –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞
$start_time = time();
my $perf_login_req = HTTP::Request->new('POST', "$base_url/login");
$perf_login_req->header('Content-Type' => 'application/x-www-form-urlencoded');
$perf_login_req->content("username=$test_user->{username}&password=$test_user->{password}");
$ua->request($perf_login_req);
my $login_time = sprintf("%.3f", time() - $start_time);
print "      –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É: ${login_time}—Å\n";

print "\nüìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:\n";
print "=" x 30 . "\n";

if ($login_success) {
    print "üéâ –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –§–£–ù–ö–¶–ò–û–ù–ò–†–£–ï–¢!\n";
    print "   ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n";
    print "   ‚úÖ –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É\n";
    print "   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n";
    print "   ‚úÖ –ó–∞—â–∏—Ç–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤\n";
    print "   ‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n\n";
    
    print "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n";
    print "   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS –≤ production\n";
    print "   - –î–æ–±–∞–≤—å—Ç–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π\n";
    print "   - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Secure/HttpOnly cookies\n";
    print "   - –î–æ–±–∞–≤—å—Ç–µ rate limiting\n";
    exit 0;
} else {
    print "‚ùå –ü–†–û–ë–õ–ï–ú–´ –° –°–ò–°–¢–ï–ú–û–ô –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò!\n";
    print "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n";
    print "   - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤\n";
    print "   - –°—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n";
    print "   - –û–±—Ä–∞–±–æ—Ç–∫—É POST –∑–∞–ø—Ä–æ—Å–æ–≤\n";
    exit 1;
}

__END__

=head1 USAGE

    # –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    cd megachat  
    perl megachat.pl &
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç
    perl tests/05_check_auth.pl

=head1 DEPENDENCIES

    LWP::UserAgent
    HTTP::Request
    HTTP::Cookies
    JSON
    Time::HiRes

=head1 AUTHOR

MegaChat Project

=cut
