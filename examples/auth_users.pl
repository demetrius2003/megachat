#!/usr/bin/env perl
use strict;
use warnings;
use utf8;
use LWP::UserAgent;
use HTTP::Request;
use HTTP::Cookies;
use JSON;
use Time::HiRes qw(time);
use POSIX qw(strftime);

=head1 NAME

auth_users.pl - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —á–µ—Ä–µ–∑ MegaChat API

=head1 DESCRIPTION

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ REST API MegaChat –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

=cut

# –í–∫–ª—é—á–∞–µ–º UTF-8 –≤—ã–≤–æ–¥
binmode(STDOUT, ":encoding(UTF-8)");
binmode(STDERR, ":encoding(UTF-8)");

print "üë• MEGACHAT API - –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò\n";
print "=" x 60 . "\n\n";

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
my $base_url = 'http://localhost:3000';
my $timeout = 30;

# HTTP –∫–ª–∏–µ–Ω—Ç –ë–ï–ó –æ–±—â–∏—Ö cookies (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Å—Å–∏–π)
my $ua = LWP::UserAgent->new(
    timeout => $timeout,
    agent => 'MegaChat-Auth-Example/1.0'
);

my $json = JSON->new->utf8->pretty;

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

sub api_request {
    my ($method, $endpoint, $data, $ua_instance) = @_;
    $ua_instance //= $ua;
    
    my $url = $base_url . $endpoint;
    my $req;
    
    if ($method eq 'GET') {
        $req = HTTP::Request->new('GET', $url);
    } elsif ($method eq 'POST') {
        $req = HTTP::Request->new('POST', $url);
        if ($endpoint =~ m{/(login|register)$}) {
            # –§–æ—Ä–º–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            $req->header('Content-Type' => 'application/x-www-form-urlencoded');
            $req->content($data);
        } else {
            # JSON –¥–ª—è API
            $req->header('Content-Type' => 'application/json');
            $req->content($json->encode($data)) if $data;
        }
    }
    
    my $response = $ua_instance->request($req);
    
    print "   üì° $method $endpoint: ";
    if ($response->is_success || $response->code == 302) {
        print "‚úÖ " . $response->code;
        if ($response->code == 302) {
            my $location = $response->header('Location') || '';
            print " ‚Üí $location";
        }
        print "\n";
        
        if ($response->header('Content-Type') && $response->header('Content-Type') =~ /json/) {
            my $result = eval { $json->decode($response->content) };
            if ($result) {
                return $result;
            } else {
                return { success => 1, content => $response->content };
            }
        } else {
            return { 
                success => 1, 
                content => $response->content, 
                headers => $response->headers,
                redirect => $response->header('Location')
            };
        }
    } else {
        print "‚ùå " . $response->status_line . "\n";
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å JSON –æ—à–∏–±–∫—É
        if ($response->header('Content-Type') && $response->header('Content-Type') =~ /json/) {
            my $error_data = eval { $json->decode($response->content) };
            if ($error_data) {
                return { error => $response->status_line, code => $response->code, details => $error_data };
            }
        }
        
        return { error => $response->status_line, code => $response->code };
    }
}

sub create_user_session {
    my $cookies = HTTP::Cookies->new();
    return LWP::UserAgent->new(
        timeout => $timeout,
        agent => 'MegaChat-Session/1.0',
        cookie_jar => $cookies
    );
}

sub generate_test_users {
    my $timestamp = int(time());
    
    return [
        {
            username => "test_user_$timestamp",
            email => "test$timestamp\@megachat.demo",
            password => "secure_password_123",
            role => "user"
        },
        {
            username => "demo_admin_$timestamp",
            email => "admin$timestamp\@megachat.demo", 
            password => "admin_secure_456",
            role => "admin"
        },
        {
            username => "guest_$timestamp",
            email => "guest$timestamp\@megachat.demo",
            password => "guest_pass_789",
            role => "guest"
        }
    ];
}

sub print_user_info {
    my ($user, $prefix) = @_;
    $prefix //= '';
    
    if (ref($user) eq 'HASH') {
        print "${prefix}üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $user->{username}\n";
        print "${prefix}   üìß Email: " . ($user->{email} || '–Ω–µ —É–∫–∞–∑–∞–Ω') . "\n";
        print "${prefix}   üÜî ID: " . ($user->{id} || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') . "\n";
        print "${prefix}   üìÖ –°–æ–∑–¥–∞–Ω: " . ($user->{created_at} || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') . "\n";
        print "${prefix}   üü¢ –°—Ç–∞—Ç—É—Å: " . ($user->{status} || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') . "\n";
        
        if ($user->{last_seen}) {
            print "${prefix}   üëÅÔ∏è  –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: $user->{last_seen}\n";
        }
    }
}

sub test_session_security {
    my ($user_session, $username) = @_;
    
    print "   üîí –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏ –¥–ª—è $username:\n";
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
    my $auth_check = api_request('GET', '/api/auth/check', undef, $user_session);
    
    if ($auth_check && $auth_check->{success}) {
        print "      ‚úÖ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞: $auth_check->{user}->{username}\n";
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º
        my $protected_resources = [
            '/api/conversations',
            '/api/notes',
            '/api/users/search?q=test'
        ];
        
        foreach my $resource (@$protected_resources) {
            my $access_test = api_request('GET', $resource, undef, $user_session);
            if ($access_test && !$access_test->{error}) {
                print "      ‚úÖ –î–æ—Å—Ç—É–ø –∫ $resource\n";
            } else {
                print "      ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ $resource\n";
            }
        }
        
        return $auth_check->{user};
    } else {
        print "      ‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞\n";
        return undef;
    }
}

# === –û–°–ù–û–í–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê ===

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
print "üåê –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò API:\n";
my $server_check = api_request('GET', '/');
if (!$server_check || $server_check->{error}) {
    print "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ MegaChat –∑–∞–ø—É—â–µ–Ω.\n";
    exit 1;
}
print "\n";

# === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–û–í–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===

print "üìù –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–û–í–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:\n";

my $test_users = generate_test_users();
my @registered_users;

foreach my $user_data (@$test_users) {
    print "   üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '$user_data->{username}':\n";
    
    my $register_data = "username=$user_data->{username}&" .
                       "email=$user_data->{email}&" .
                       "password=$user_data->{password}&" .
                       "confirm_password=$user_data->{password}";
    
    my $register_result = api_request('POST', '/register', $register_data);
    
    if ($register_result && ($register_result->{success} || $register_result->{redirect})) {
        print "      ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n";
        
        if ($register_result->{redirect}) {
            print "      üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: $register_result->{redirect}\n";
        }
        
        push @registered_users, $user_data;
    } else {
        print "      ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n";
        
        if ($register_result->{content} && $register_result->{content} =~ /—Å—É—â–µ—Å—Ç–≤—É–µ—Ç/i) {
            print "      üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n";
            push @registered_users, $user_data; # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
        }
    }
    print "\n";
}

# === –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===

print "üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:\n";

my @user_sessions;

foreach my $user_data (@registered_users) {
    print "   üîë –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '$user_data->{username}':\n";
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    my $user_session = create_user_session();
    
    my $login_data = "username=$user_data->{username}&password=$user_data->{password}";
    my $login_result = api_request('POST', '/login', $login_data, $user_session);
    
    if ($login_result && ($login_result->{success} || $login_result->{redirect})) {
        print "      ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞\n";
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
        my $user_info = test_session_security($user_session, $user_data->{username});
        
        if ($user_info) {
            push @user_sessions, {
                session => $user_session,
                user_data => $user_data,
                user_info => $user_info
            };
        }
    } else {
        print "      ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n";
        
        if ($login_result->{details}) {
            print "      üìã –î–µ—Ç–∞–ª–∏: " . ($login_result->{details}->{message} || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') . "\n";
        }
    }
    print "\n";
}

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ===

print "üë• –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò:\n";

if (@user_sessions) {
    my $admin_session = $user_sessions[0]->{session}; # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Å–µ—Å—Å–∏—é –∫–∞–∫ –∞–¥–º–∏–Ω—Å–∫—É—é
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print "   üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n";
    
    my $users_list = api_request('GET', '/api/users/search?q=', undef, $admin_session);
    if ($users_list && ref($users_list) eq 'ARRAY') {
        print "      ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " . scalar(@$users_list) . "\n\n";
        
        foreach my $user (@$users_list) {
            print_user_info($user, "      ");
            print "\n";
        }
    } else {
        print "      ‚ö†Ô∏è  –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—É—Å—Ç\n\n";
    }
    
    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print "   üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n";
    
    my @search_terms = ('admin', 'test', 'user');
    foreach my $term (@search_terms) {
        print "      üîé –ü–æ–∏—Å–∫ '$term':\n";
        
        my $search_result = api_request('GET', "/api/users/search?q=$term", undef, $admin_session);
        if ($search_result && ref($search_result) eq 'ARRAY') {
            print "         üìä –ù–∞–π–¥–µ–Ω–æ: " . scalar(@$search_result) . " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n";
            
            foreach my $user (@$search_result) {
                print "         üë§ $user->{username} ($user->{email})\n";
            }
        } else {
            print "         üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n";
        }
        print "\n";
    }
}

# === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===

print "üõ°Ô∏è  –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:\n";

# –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
print "   üîê –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π:\n";
if (@user_sessions >= 2) {
    foreach my $session_data (@user_sessions) {
        my $username = $session_data->{user_data}->{username};
        my $auth_check = api_request('GET', '/api/auth/check', undef, $session_data->{session});
        
        if ($auth_check && $auth_check->{success}) {
            print "      ‚úÖ –°–µ—Å—Å–∏—è $username –∞–∫—Ç–∏–≤–Ω–∞\n";
        } else {
            print "      ‚ùå –°–µ—Å—Å–∏—è $username –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞\n";
        }
    }
} else {
    print "      ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–µ—Å—Å–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n";
}

# –¢–µ—Å—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
print "\n   üö´ –¢–µ—Å—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n";
my $invalid_attempts = [
    { username => 'nonexistent_user', password => 'any_password' },
    { username => 'admin', password => 'wrong_password' },
    { username => '', password => '' }
];

foreach my $invalid (@$invalid_attempts) {
    print "      üîë –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: '$invalid->{username}' / '[—Å–∫—Ä—ã—Ç]'\n";
    
    my $temp_session = create_user_session();
    my $invalid_data = "username=$invalid->{username}&password=$invalid->{password}";
    my $invalid_result = api_request('POST', '/login', $invalid_data, $temp_session);
    
    if ($invalid_result && $invalid_result->{error}) {
        print "         ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω\n";
    } elsif ($invalid_result && $invalid_result->{success}) {
        print "         ‚ùå –ü–†–û–ë–õ–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: –≤—Ö–æ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω!\n";
    } else {
        print "         ‚úÖ –í—Ö–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω\n";
    }
}

# –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
print "\n   üîí –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n";
my $unauthorized_session = create_user_session();
my $protected_endpoints = [
    '/api/conversations',
    '/api/notes',
    '/api/messages'
];

foreach my $endpoint (@$protected_endpoints) {
    my $unauthorized_access = api_request('GET', $endpoint, undef, $unauthorized_session);
    
    if ($unauthorized_access && $unauthorized_access->{error}) {
        print "      ‚úÖ $endpoint: –¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n";
    } else {
        print "      ‚ö†Ô∏è  $endpoint: –≤–æ–∑–º–æ–∂–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n";
    }
}

print "\n";

# === –í–´–•–û–î –ò–ó –°–ò–°–¢–ï–ú–´ ===

print "üö™ –í–´–•–û–î –ò–ó –°–ò–°–¢–ï–ú–´:\n";

if (@user_sessions) {
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    my $session_to_logout = $user_sessions[0];
    my $username = $session_to_logout->{user_data}->{username};
    
    print "   üëã –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '$username':\n";
    
    my $logout_result = api_request('POST', '/api/auth/logout', {}, $session_to_logout->{session});
    
    if ($logout_result && ($logout_result->{success} || $logout_result->{redirect})) {
        print "      ‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ\n";
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        print "   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:\n";
        my $post_logout_check = api_request('GET', '/api/auth/check', undef, $session_to_logout->{session});
        
        if ($post_logout_check && !$post_logout_check->{success}) {
            print "      ‚úÖ –°–µ—Å—Å–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n";
        } else {
            print "      ‚ö†Ô∏è  –°–µ—Å—Å–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞\n";
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞
        print "   üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞:\n";
        my $post_logout_access = api_request('GET', '/api/conversations', undef, $session_to_logout->{session});
        
        if ($post_logout_access && $post_logout_access->{error}) {
            print "      ‚úÖ –î–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n";
        } else {
            print "      ‚ö†Ô∏è  –î–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç\n";
        }
    } else {
        print "      ‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n";
    }
}

print "\n";

# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===

print "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:\n";

if (@user_sessions) {
    my $stats_session = $user_sessions[-1]->{session}; # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    
    my $all_users = api_request('GET', '/api/users/search?q=', undef, $stats_session);
    if ($all_users && ref($all_users) eq 'ARRAY') {
        my %status_count;
        my %domain_count;
        my $total_users = scalar(@$all_users);
        
        foreach my $user (@$all_users) {
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            my $status = $user->{status} || 'unknown';
            $status_count{$status}++;
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–º–µ–Ω–∞–º email
            if ($user->{email} && $user->{email} =~ /\@(.+)$/) {
                my $domain = $1;
                $domain_count{$domain}++;
            }
        }
        
        print "   üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n";
        print "      üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $total_users\n";
        print "      ‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ —Å–µ—Å—Å–∏–∏: " . scalar(@registered_users) . "\n";
        print "      üîê –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: " . scalar(@user_sessions) . "\n";
        
        print "\n   üü¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:\n";
        foreach my $status (sort keys %status_count) {
            print "      $status: $status_count{$status} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n";
        }
        
        if (%domain_count) {
            print "\n   üìß –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–º–µ–Ω–∞–º email:\n";
            foreach my $domain (sort { $domain_count{$b} <=> $domain_count{$a} } keys %domain_count) {
                print "      \@$domain: $domain_count{$domain} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n";
            }
        }
    }
}

# === –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• ===

print "\nüßπ –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•:\n";
print "   ‚ö†Ô∏è  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ\n";

foreach my $user_data (@registered_users) {
    print "   üóëÔ∏è  –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '$user_data->{username}':\n";
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É–¥–∞–ª–µ–Ω–∏—è
    my @delete_attempts = (
        { method => 'DELETE', endpoint => "/api/users/$user_data->{username}" },
        { method => 'POST', endpoint => '/api/users/delete', data => { username => $user_data->{username} } }
    );
    
    my $deleted = 0;
    foreach my $attempt (@delete_attempts) {
        my $delete_result = api_request($attempt->{method}, $attempt->{endpoint}, $attempt->{data});
        
        if ($delete_result && $delete_result->{success}) {
            print "      ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω\n";
            $deleted = 1;
            last;
        }
    }
    
    if (!$deleted) {
        print "      üí° API —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω\n";
        print "      üõ†Ô∏è  –†—É—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ë–î: DELETE FROM users WHERE username='$user_data->{username}'\n";
    }
}

print "\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:\n";
print "=" x 40 . "\n";

print "üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n";
print "   ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " . scalar(@registered_users) . "\n";
print "   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " . scalar(@user_sessions) . "\n";
print "   ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π\n";
print "   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º\n";
print "   ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n";

print "\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò:\n";
print "   üîê –î–æ–±–∞–≤—å—Ç–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π (bcrypt/scrypt)\n";
print "   üïê –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π\n";
print "   üö´ –î–æ–±–∞–≤—å—Ç–µ –∑–∞—â–∏—Ç—É –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞ (rate limiting)\n";
print "   üîí –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS –≤ production\n";
print "   üç™ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Secure –∏ HttpOnly cookies\n";
print "   üë• –î–æ–±–∞–≤—å—Ç–µ —Ä–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n";
print "   üìä –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n";
print "   üîÑ –î–æ–±–∞–≤—å—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é\n";
print "   üóëÔ∏è  –†–µ–∞–ª–∏–∑—É–π—Ç–µ API —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n";

print "\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò –ó–ê–í–ï–†–®–ï–ù–ê!\n";

__END__

=head1 USAGE

    # –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    cd megachat
    perl megachat.pl &
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–º–µ—Ä
    perl examples/auth_users.pl

=head1 DEPENDENCIES

    LWP::UserAgent
    HTTP::Request
    HTTP::Cookies
    JSON
    Time::HiRes
    POSIX

=head1 AUTHOR

MegaChat API Examples

=cut
