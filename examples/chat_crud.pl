#!/usr/bin/env perl
use strict;
use warnings;
use utf8;
use LWP::UserAgent;
use HTTP::Request;
use HTTP::Cookies;
use JSON;
use Data::Dumper;

=head1 NAME

chat_crud.pl - CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —á–∞—Ç–∞–º–∏ —á–µ—Ä–µ–∑ MegaChat API

=head1 DESCRIPTION

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–π Create, Read, Update, Delete
–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ —á–µ—Ä–µ–∑ REST API MegaChat –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

=cut

# –í–∫–ª—é—á–∞–µ–º UTF-8 –≤—ã–≤–æ–¥
binmode(STDOUT, ":encoding(UTF-8)");
binmode(STDERR, ":encoding(UTF-8)");

print "üí¨ MEGACHAT API - CRUD –û–ü–ï–†–ê–¶–ò–ò –° –ß–ê–¢–ê–ú–ò\n";
print "=" x 50 . "\n\n";

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
my $base_url = 'http://localhost:3000';
my $timeout = 30;

# HTTP –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π cookies –¥–ª—è —Å–µ—Å—Å–∏–π
my $ua = LWP::UserAgent->new(
    timeout => $timeout,
    agent => 'MegaChat-API-Example/1.0',
    cookie_jar => HTTP::Cookies->new()
);

my $json = JSON->new->utf8->pretty;

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

sub api_request {
    my ($method, $endpoint, $data) = @_;
    
    my $url = $base_url . $endpoint;
    my $req;
    
    if ($method eq 'GET') {
        $req = HTTP::Request->new('GET', $url);
    } elsif ($method eq 'POST') {
        $req = HTTP::Request->new('POST', $url);
        $req->header('Content-Type' => 'application/json');
        $req->content($json->encode($data)) if $data;
    } elsif ($method eq 'PUT') {
        $req = HTTP::Request->new('PUT', $url);
        $req->header('Content-Type' => 'application/json');
        $req->content($json->encode($data)) if $data;
    } elsif ($method eq 'DELETE') {
        $req = HTTP::Request->new('DELETE', $url);
    }
    
    my $response = $ua->request($req);
    
    print "   üì° $method $endpoint: ";
    if ($response->is_success) {
        print "‚úÖ " . $response->code . "\n";
        
        # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if ($response->header('Content-Type') && $response->header('Content-Type') =~ /json/) {
            my $result = eval { $json->decode($response->content) };
            if ($result) {
                return $result;
            } else {
                print "      ‚ö†Ô∏è  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ\n";
                return { error => 'Invalid JSON', content => $response->content };
            }
        } else {
            return { success => 1, content => $response->content };
        }
    } else {
        print "‚ùå " . $response->status_line . "\n";
        return { error => $response->status_line, code => $response->code };
    }
}

sub login_user {
    my ($username, $password) = @_;
    
    print "üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n";
    print "   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $username\n";
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ª–∏ —É–∂–µ
    my $check_result = api_request('GET', '/api/auth/check');
    if ($check_result && $check_result->{success}) {
        print "   ‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: $check_result->{user}->{username}\n\n";
        return $check_result->{user};
    }
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É
    my $login_req = HTTP::Request->new('POST', "$base_url/login");
    $login_req->header('Content-Type' => 'application/x-www-form-urlencoded');
    $login_req->content("username=$username&password=$password");
    
    my $login_resp = $ua->request($login_req);
    
    if ($login_resp->is_success || $login_resp->code == 302) {
        print "   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞\n";
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        my $auth_check = api_request('GET', '/api/auth/check');
        if ($auth_check && $auth_check->{success}) {
            print "   üë§ –í–æ—à–ª–∏ –∫–∞–∫: $auth_check->{user}->{username} (ID: $auth_check->{user}->{id})\n\n";
            return $auth_check->{user};
        }
    }
    
    print "   ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n\n";
    return undef;
}

sub print_chat_info {
    my ($chat, $prefix) = @_;
    $prefix //= '';
    
    if (ref($chat) eq 'HASH') {
        print "${prefix}üìã –ß–∞—Ç #$chat->{id}: '$chat->{name}'\n";
        print "${prefix}   –û–ø–∏—Å–∞–Ω–∏–µ: " . ($chat->{description} || '–Ω–µ—Ç') . "\n";
        print "${prefix}   –°–æ–∑–¥–∞–Ω: " . ($chat->{created_at} || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') . "\n";
        print "${prefix}   –°–æ–∑–¥–∞—Ç–µ–ª—å: " . ($chat->{created_by} || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') . "\n";
        
        if ($chat->{participants} && ref($chat->{participants}) eq 'ARRAY') {
            print "${prefix}   –£—á–∞—Å—Ç–Ω–∏–∫–∏ (" . scalar(@{$chat->{participants}}) . "): ";
            print join(', ', map { $_->{username} || $_->{id} } @{$chat->{participants}}) . "\n";
        }
    }
}

# === –û–°–ù–û–í–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê ===

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
print "üåê –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò API:\n";
my $server_check = api_request('GET', '/');
if (!$server_check || $server_check->{error}) {
    print "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ MegaChat –∑–∞–ø—É—â–µ–Ω.\n";
    print "üí° –ó–∞–ø—É—Å–∫: cd megachat && perl megachat.pl\n";
    exit 1;
}
print "\n";

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
my $user = login_user('admin', 'admin');
if (!$user) {
    print "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'admin' –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–∫—Ä–∏–ø—Ç–µ.\n";
    exit 1;
}

# === CREATE - –°–û–ó–î–ê–ù–ò–ï –ß–ê–¢–û–í ===

print "‚ûï CREATE - –°–û–ó–î–ê–ù–ò–ï –ù–û–í–´–• –ß–ê–¢–û–í:\n";

my @new_chats;

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∞—Ç–∞
print "   1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∞—Ç–∞:\n";
my $simple_chat_data = {
    name => "API Demo Chat " . time(),
    description => "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á–µ—Ä–µ–∑ API",
    participants => []
};

my $simple_chat = api_request('POST', '/api/conversations', $simple_chat_data);
if ($simple_chat && $simple_chat->{success}) {
    push @new_chats, $simple_chat;
    print "      ‚úÖ –°–æ–∑–¥–∞–Ω —á–∞—Ç ID: $simple_chat->{id}\n";
} else {
    print "      ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞\n";
}

# –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
print "   2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏:\n";

# –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
my $users_search = api_request('GET', '/api/users/search?q=user');
my @available_users;

if ($users_search && ref($users_search) eq 'ARRAY') {
    @available_users = grep { $_->{id} != $user->{id} } @$users_search; # –ò—Å–∫–ª—é—á–∞–µ–º —Å–µ–±—è
    print "      üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " . scalar(@available_users) . "\n";
}

my $group_chat_data = {
    name => "API Group Chat " . time(),
    description => "–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏",
    participants => [map { { id => $_->{id}, username => $_->{username} } } @available_users[0..1]] # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö
};

my $group_chat = api_request('POST', '/api/conversations', $group_chat_data);
if ($group_chat && $group_chat->{success}) {
    push @new_chats, $group_chat;
    print "      ‚úÖ –°–æ–∑–¥–∞–Ω –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç ID: $group_chat->{id}\n";
} else {
    print "      ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞\n";
}

print "\n";

# === READ - –ß–¢–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ß–ê–¢–û–í ===

print "üìñ READ - –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ß–ê–¢–û–í:\n";

my $all_chats = api_request('GET', '/api/conversations');
if ($all_chats && ref($all_chats) eq 'ARRAY') {
    print "   üìã –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: " . scalar(@$all_chats) . "\n\n";
    
    foreach my $chat (@$all_chats) {
        print_chat_info($chat, "   ");
        print "\n";
    }
} else {
    print "   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤\n\n";
}

# === READ - –ü–û–õ–£–ß–ï–ù–ò–ï –î–ï–¢–ê–õ–¨–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ß–ê–¢–ï ===

if (@new_chats) {
    print "üîç READ - –ü–û–õ–£–ß–ï–ù–ò–ï –î–ï–¢–ê–õ–¨–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ß–ê–¢–ï:\n";
    
    my $chat_id = $new_chats[0]->{id};
    print "   –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ #$chat_id:\n";
    
    my $chat_details = api_request('GET', "/api/conversations/$chat_id");
    if ($chat_details && !$chat_details->{error}) {
        print "   ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:\n";
        print_chat_info($chat_details, "      ");
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
        print "\n   üì® –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞:\n";
        my $messages = api_request('GET', "/api/conversations/$chat_id/messages");
        if ($messages && ref($messages) eq 'ARRAY') {
            if (@$messages) {
                foreach my $msg (@$messages) {
                    print "      üí¨ [$msg->{created_at}] $msg->{username}: $msg->{content}\n";
                }
            } else {
                print "      üì≠ –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç\n";
            }
        }
    } else {
        print "   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n";
    }
    print "\n";
}

# === UPDATE - –û–ë–ù–û–í–õ–ï–ù–ò–ï –ß–ê–¢–û–í ===

print "‚úèÔ∏è  UPDATE - –û–ë–ù–û–í–õ–ï–ù–ò–ï –ß–ê–¢–û–í:\n";
print "   ‚ö†Ô∏è  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ API UPDATE –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã\n";

if (@new_chats) {
    my $chat_id = $new_chats[0]->{id};
    print "   –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ #$chat_id:\n";
    
    my $update_data = {
        name => "Updated API Demo Chat",
        description => "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ API"
    };
    
    # –ü—Ä–æ–±—É–µ–º PUT –∑–∞–ø—Ä–æ—Å
    my $update_result = api_request('PUT', "/api/conversations/$chat_id", $update_data);
    if ($update_result && !$update_result->{error}) {
        print "      ‚úÖ –ß–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω\n";
    } else {
        print "      ‚ÑπÔ∏è  UPDATE –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è (–∫–æ–¥: " . ($update_result->{code} || 'unknown') . ")\n";
    }
}
print "\n";

# === DELETE - –£–î–ê–õ–ï–ù–ò–ï –ß–ê–¢–û–í ===

print "üóëÔ∏è  DELETE - –£–î–ê–õ–ï–ù–ò–ï –ß–ê–¢–û–í:\n";
print "   ‚ö†Ô∏è  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ API DELETE –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã\n";

if (@new_chats) {
    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —á–∞—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    my $chat_to_delete = pop @new_chats;
    my $chat_id = $chat_to_delete->{id};
    
    print "   –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞ #$chat_id:\n";
    
    my $delete_result = api_request('DELETE', "/api/conversations/$chat_id");
    if ($delete_result && !$delete_result->{error}) {
        print "      ‚úÖ –ß–∞—Ç —É–¥–∞–ª–µ–Ω\n";
    } else {
        print "      ‚ÑπÔ∏è  DELETE –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è (–∫–æ–¥: " . ($delete_result->{code} || 'unknown') . ")\n";
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —á–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω
    print "   –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:\n";
    my $check_deleted = api_request('GET', "/api/conversations/$chat_id");
    if ($check_deleted && $check_deleted->{error}) {
        print "      ‚úÖ –ß–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω (404)\n";
    } else {
        print "      ‚ÑπÔ∏è  –ß–∞—Ç –≤—Å–µ –µ—â–µ –¥–æ—Å—Ç—É–ø–µ–Ω\n";
    }
}
print "\n";

# === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò ===

print "üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò:\n";

# –ü–æ–∏—Å–∫ —á–∞—Ç–æ–≤
print "   üîç –ü–æ–∏—Å–∫ —á–∞—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏:\n";
my $search_result = api_request('GET', '/api/conversations');
if ($search_result && ref($search_result) eq 'ARRAY') {
    my @api_chats = grep { $_->{name} && $_->{name} =~ /API/i } @$search_result;
    print "      üìã –ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤ —Å 'API' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏: " . scalar(@api_chats) . "\n";
    foreach my $chat (@api_chats) {
        print "         üìù $chat->{name} (ID: $chat->{id})\n";
    }
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
if (@new_chats) {
    my $chat_id = $new_chats[0]->{id};
    print "\n   üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç #$chat_id:\n";
    
    my $message_data = {
        conversation_id => $chat_id,
        content => "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ API.",
        message_type => "text"
    };
    
    my $message_result = api_request('POST', '/api/messages', $message_data);
    if ($message_result && $message_result->{success}) {
        print "      ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (ID: $message_result->{id})\n";
    } else {
        print "      ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\n";
    }
}

print "\n";

# === –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===

print "üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n";
print "=" x 30 . "\n";

# –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
my $final_chats = api_request('GET', '/api/conversations');
if ($final_chats && ref($final_chats) eq 'ARRAY') {
    my $total_chats = scalar(@$final_chats);
    my @my_chats = grep { $_->{created_by} && $_->{created_by} == $user->{id} } @$final_chats;
    my $my_chats_count = scalar(@my_chats);
    
    print "   üìà –í—Å–µ–≥–æ —á–∞—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: $total_chats\n";
    print "   üë§ –í–∞—à–∏—Ö —á–∞—Ç–æ–≤: $my_chats_count\n";
    print "   ‚ûï –°–æ–∑–¥–∞–Ω–æ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏: " . scalar(@new_chats) . "\n";
    
    if (@my_chats) {
        print "\n   üìã –í–∞—à–∏ —á–∞—Ç—ã:\n";
        foreach my $chat (@my_chats) {
            print "      üí¨ $chat->{name} (ID: $chat->{id})\n";
        }
    }
}

print "\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò:\n";
print "   üîß –†–µ–∞–ª–∏–∑—É–π—Ç–µ PUT/PATCH –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤\n";
print "   üóëÔ∏è  –†–µ–∞–ª–∏–∑—É–π—Ç–µ DELETE –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤\n";
print "   üë• –î–æ–±–∞–≤—å—Ç–µ API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n";
print "   üîç –î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ–∏—Å–∫ –ø–æ —á–∞—Ç–∞–º\n";
print "   üìä –î–æ–±–∞–≤—å—Ç–µ –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤\n";

print "\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø CRUD –û–ü–ï–†–ê–¶–ò–ô –ó–ê–í–ï–†–®–ï–ù–ê!\n";

__END__

=head1 USAGE

    # –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    cd megachat
    perl megachat.pl &
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–º–µ—Ä
    perl examples/chat_crud.pl

=head1 DEPENDENCIES

    LWP::UserAgent
    HTTP::Request  
    HTTP::Cookies
    JSON
    Data::Dumper

=head1 AUTHOR

MegaChat API Examples

=cut
