// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏
class ChatManager {
    constructor() {
        this.conversations = [];
        this.currentConversationId = null;
        this.currentUserId = null;
        this.lastMessageId = 0;
        this.selectedParticipants = [];
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    async loadConversations() {
        try {
            const response = await fetch('/api/conversations');
            if (response.ok) {
                this.conversations = await response.json();
                console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ —á–∞—Ç–æ–≤:', this.conversations.length);
                this.renderConversations();
            } else {
                this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:', error);
            this.showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    renderConversations() {
        const container = document.getElementById('conversationsList');
        const emptyState = document.getElementById('emptyConversations');
        
        if (this.conversations.length === 0) {
            container.innerHTML = '';
            emptyState.style.display = 'block';
            return;
        }
        
        emptyState.style.display = 'none';
        container.innerHTML = this.conversations.map(conv => {
            let icon = 'bi-chat-dots';
            if (conv.type === 'notes') icon = 'bi-journal-text';
            else if (conv.type === 'files') icon = 'bi-cloud-upload';
            else if (conv.type === 'group') icon = 'bi-people';
            
            return `
                <a href="#" class="list-group-item list-group-item-action ${conv.id === this.currentConversationId ? 'active' : ''}" 
                   data-conversation-id="${conv.id}">
                    <div class="d-flex w-100 justify-content-between">
                        <h6 class="mb-1">
                            <i class="bi ${icon}"></i> ${conv.name || '–õ–∏—á–Ω—ã–π —á–∞—Ç'}
                        </h6>
                        <small>${conv.updated_at_formatted}</small>
                    </div>
                    <p class="mb-1 text-muted small">${conv.last_message || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'}</p>
                    <small>${conv.last_message_sender_username ? '–û—Ç: ' + conv.last_message_sender_username : ''}</small>
                </a>
            `;
        }).join('');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        this.setupConversationClickHandlers();
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∏–∫–æ–≤ –ø–æ —á–∞—Ç–∞–º
    setupConversationClickHandlers() {
        const container = document.getElementById('conversationsList');
        if (!container) return;
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        container.removeEventListener('click', this.handleConversationClick);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        this.handleConversationClick = (e) => {
            e.preventDefault();
            const listItem = e.target.closest('.list-group-item[data-conversation-id]');
            if (listItem) {
                const conversationId = parseInt(listItem.getAttribute('data-conversation-id'));
                console.log('üéØ –ö–ª–∏–∫ –ø–æ —á–∞—Ç—É:', conversationId);
                this.selectConversation(conversationId);
            }
        };
        
        container.addEventListener('click', this.handleConversationClick);
    }

    // –í—ã–±–æ—Ä —á–∞—Ç–∞
    async selectConversation(conversationId) {
        console.log('üéØ –í—ã–±–∏—Ä–∞–µ–º —á–∞—Ç:', conversationId);
        
        // –ü–æ–∫–∏–¥–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —á–∞—Ç
        if (this.currentConversationId) {
            websocketManager.leaveConversation();
        }
        
        this.currentConversationId = conversationId;
        this.lastMessageId = 0;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ
        document.querySelectorAll('#conversationsList .list-group-item').forEach(item => {
            item.classList.remove('active');
        });
        
        // –ù–∞—Ö–æ–¥–∏–º –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç —á–∞—Ç–∞
        const chatElement = document.querySelector(`#conversationsList .list-group-item[data-conversation-id="${conversationId}"]`);
        if (chatElement) {
            chatElement.classList.add('active');
            console.log('‚úÖ –ß–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —Å–ø–∏—Å–∫–µ');
        } else {
            console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
        document.getElementById('chatArea').style.display = 'block';
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ:', conversationId);
        await this.loadChatInfo(conversationId);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await this.loadMessages(conversationId);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —á–∞—Ç–∞
        const currentChat = this.conversations.find(c => c.id === conversationId);
        const messageForm = document.querySelector('#chatArea .card-footer');
        
        if (currentChat && (currentChat.type === 'notes' || currentChat.type === 'files')) {
            messageForm.style.display = 'none';
        } else {
            messageForm.style.display = 'block';
        }
        
        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —á–∞—Ç—É —á–µ—Ä–µ–∑ WebSocket
        if (!currentChat || (currentChat.type !== 'notes' && currentChat.type !== 'files')) {
            websocketManager.joinConversation(conversationId);
            pollingManager.startPolling(); // Fallback –ø–æ–ª–ª–∏–Ω–≥
        } else {
            pollingManager.stopPolling();
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
    async loadChatInfo(conversationId) {
        console.log('üè∑Ô∏è loadChatInfo –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è —á–∞—Ç–∞:', conversationId);
        try {
            const response = await fetch(`/api/conversations/${conversationId}`);
            console.log('üì° –û—Ç–≤–µ—Ç API /api/conversations/' + conversationId + ':', response.status);
            if (response.ok) {
                const chat = await response.json();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
                let chatTitle = chat.name || '–õ–∏—á–Ω—ã–π —á–∞—Ç';
                if (chat.type === 'notes') {
                    chatTitle = 'üìù –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏';
                } else if (chat.type === 'files') {
                    chatTitle = 'üìÅ –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã';
                }
                const titleElement = document.getElementById('chatTitle');
                const descElement = document.getElementById('chatDescription');
                
                if (titleElement) {
                    titleElement.textContent = chatTitle;
                    console.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', chatTitle);
                } else {
                    console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç chatTitle –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
                let description = '';
                if (chat.participants && chat.participants.length > 0) {
                    const participantNames = chat.participants.map(p => p.username).join(', ');
                    description = `–£—á–∞—Å—Ç–Ω–∏–∫–∏: ${participantNames}`;
                } else if (chat.description) {
                    description = chat.description;
                } else {
                    description = chat.type === 'notes' ? '–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏' : 
                                 chat.type === 'files' ? '–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã' : 
                                 '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è';
                }
                
                if (descElement) {
                    descElement.textContent = description;
                    console.log('‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', description);
                } else {
                    console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç chatDescription –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                }
                
                console.log('üè∑Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:', chatTitle, '|', description);
            } else if (response.status === 404) {
                console.warn('‚ö†Ô∏è –ß–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                const titleElement = document.getElementById('chatTitle');
                const descElement = document.getElementById('chatDescription');
                
                if (titleElement) titleElement.textContent = '‚ùå –ß–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
                if (descElement) descElement.textContent = '–≠—Ç–æ—Ç —á–∞—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞';
                
                // –û—á–∏—â–∞–µ–º –æ–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π
                const messagesList = document.getElementById('messagesList');
                if (messagesList) {
                    messagesList.innerHTML = '<div class="alert alert-warning">–ß–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</div>';
                }
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞:', response.status);
                const titleElement = document.getElementById('chatTitle');
                const descElement = document.getElementById('chatDescription');
                
                if (titleElement) titleElement.textContent = '‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
                if (descElement) descElement.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ';
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ:', error);
            const titleElement = document.getElementById('chatTitle');
            const descElement = document.getElementById('chatDescription');
            
            if (titleElement) titleElement.textContent = '‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
            if (descElement) descElement.textContent = '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É';
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    async loadMessages(conversationId) {
        try {
            const currentChat = this.conversations.find(c => c.id === conversationId);
            
            // –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            if (currentChat && (currentChat.type === 'notes' || currentChat.type === 'files')) {
                if (currentChat.type === 'notes') {
                    await this.renderNotesInChat();
                } else if (currentChat.type === 'files') {
                    await this.renderFilesInChat();
                }
                return;
            }
            
            const response = await fetch(`/api/conversations/${conversationId}/messages`);
            if (response.ok) {
                const messages = await response.json();
                this.renderMessages(messages);
                this.lastMessageId = messages.length > 0 ? messages[messages.length - 1].id : 0;
                this.scrollToBottom();
            } else {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    renderMessages(messages) {
        const container = document.getElementById('messagesList');
        
        if (messages.length === 0) {
            container.innerHTML = '<div class="text-center text-muted">–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</div>';
            return;
        }
        
        container.innerHTML = messages.map((message, index) => {
            let messageHtml = '';
            let messageClass = 'message-card';
            
            if (message.message_type === 'file') {
                messageClass += ' message-file';
                messageHtml = `
                    <div class="d-flex align-items-center">
                        <i class="bi bi-file-earmark me-2"></i>
                        <div class="flex-grow-1">
                            <strong>${message.file_name}</strong>
                            <small class="text-muted d-block">${message.file_size_formatted}</small>
                        </div>
                        <a href="/download/${message.stored_name}" class="btn btn-sm btn-outline-primary" target="_blank">
                            <i class="bi bi-download"></i>
                        </a>
                    </div>
                `;
            } else if (message.message_type === 'note') {
                messageClass += ' message-note';
                messageHtml = `
                    <div class="d-flex align-items-start">
                        <i class="bi bi-journal-text me-2"></i>
                        <div class="flex-grow-1">
                            <strong style="color: ${message.note_color}">${message.note_title}</strong>
                            <div class="text-muted small">${message.note_content}</div>
                        </div>
                    </div>
                `;
            } else if (message.message_type === 'image') {
                messageClass += ' message-image';
                messageHtml = `
                    <div class="image-message">
                        <div class="d-flex align-items-center mb-2">
                            <i class="bi bi-image me-2"></i>
                            <div class="flex-grow-1">
                                <strong>${message.file_name}</strong>
                                <small class="text-muted d-block">${message.file_size_formatted}</small>
                            </div>
                            <a href="/download/${message.stored_name}" class="btn btn-sm btn-outline-primary" target="_blank">
                                <i class="bi bi-eye"></i>
                            </a>
                        </div>
                        <div class="image-preview-container">
                            <img src="/download/${message.stored_name}" 
                                 class="img-fluid rounded" 
                                 style="max-width: 300px; max-height: 200px; cursor: pointer;"
                                 onclick="uiManager.showImageModal('${message.stored_name}', '${message.file_name}')"
                                 onerror="this.style.display='none'">
                        </div>
                    </div>
                `;
            } else if (message.message_type === 'voice') {
                messageClass += ' message-voice';
                messageHtml = `
                    <div class="voice-message">
                        <div class="voice-controls">
                            <button class="btn btn-sm btn-outline-primary" onclick="voiceManager.playVoiceMessage('${message.stored_name}')">
                                <i class="bi bi-play-circle"></i>
                            </button>
                            <div class="voice-waveform"></div>
                            <span class="voice-duration">0:00</span>
                        </div>
                        <div class="mt-2">
                            <small class="text-muted">
                                <i class="bi bi-mic"></i> –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            </small>
                        </div>
                    </div>
                `;
            } else {
                messageHtml = message.content;
            }
            
            const isCurrentUser = message.sender_id === this.currentUserId;
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 —Å–æ–æ–±—â–µ–Ω–∏–π
            if (index < 3) {
                console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ ${index}: sender_id=${message.sender_id}, currentUserId=${this.currentUserId}, isCurrentUser=${isCurrentUser}, username=${message.sender_username}`);
            }
            return `
                <div class="${messageClass} ${isCurrentUser ? 'text-end' : 'text-start'}">
                    <div class="message-container position-relative" 
                         oncontextmenu="uiManager.showMessageContextMenu(event, ${message.id}, ${isCurrentUser})">
                        <div class="small text-muted mb-1">${message.sender_username}</div>
                        <div>${messageHtml}</div>
                        <div class="small text-muted mt-1">${message.created_at_formatted}</div>
                        
                        <!-- –†–µ–∞–∫—Ü–∏–∏ -->
                        <div class="message-reactions mt-2" id="reactions-${message.id}">
                            <!-- –†–µ–∞–∫—Ü–∏–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–¥–µ—Å—å -->
                        </div>
                        
                        <!-- –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏ -->
                        <div class="reaction-btn" onclick="reactionManager.showReactionPicker(${message.id})" style="opacity: 0.5; cursor: pointer;">
                            <i class="bi bi-emoji-smile"></i>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        messages.forEach(message => {
            reactionManager.loadReactions(message.id);
        });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        setTimeout(() => {
            if (window.applyMessageStyles) {
                window.applyMessageStyles();
            }
        }, 100);
    }

    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
    scrollToBottom() {
        const container = document.getElementById('messagesContainer');
        container.scrollTop = container.scrollHeight;
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –≤ —á–∞—Ç–µ
    async renderNotesInChat() {
        const container = document.getElementById('messagesList');
        
        try {
            const response = await fetch('/api/notes');
            if (response.ok) {
                const notes = await response.json();
                
                if (notes.length === 0) {
                    container.innerHTML = '<div class="alert alert-info">–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫</div>';
                    return;
                }
                
                container.innerHTML = notes.map(note => `
                    <div class="card mb-3">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start">
                                <h6 class="card-title" style="color: ${note.color}">${note.title}</h6>
                                <div class="btn-group btn-group-sm">
                                    <button class="btn btn-outline-primary" onclick="noteManager.loadNoteForEdit(${note.id})">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn btn-outline-success" onclick="noteManager.shareNote(${note.id})">
                                        <i class="bi bi-share"></i>
                                    </button>
                                    <button class="btn btn-outline-danger" onclick="noteManager.deleteNote(${note.id})">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                            <p class="card-text">${note.content}</p>
                            <small class="text-muted">–°–æ–∑–¥–∞–Ω–æ: ${note.created_at_formatted}</small>
                        </div>
                    </div>
                `).join('');
            } else {
                container.innerHTML = '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–º–µ—Ç–æ–∫</div>';
            }
        } catch (error) {
            container.innerHTML = '<div class="alert alert-danger">–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</div>';
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ —á–∞—Ç–µ
    async renderFilesInChat() {
        const container = document.getElementById('messagesList');
        
        try {
            const response = await fetch('/api/files');
            if (response.ok) {
                const files = await response.json();
                
                if (files.length === 0) {
                    container.innerHTML = '<div class="alert alert-info">–ù–µ—Ç —Ñ–∞–π–ª–æ–≤</div>';
                    return;
                }
                
                container.innerHTML = files.map(file => `
                    <div class="card mb-3">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start">
                                <div>
                                    <h6 class="card-title">${file.original_name}</h6>
                                    <p class="card-text text-muted small">
                                        –†–∞–∑–º–µ—Ä: ${file.file_size_formatted}<br>
                                        GUID: ${file.stored_name}
                                    </p>
                                    <small class="text-muted">–ó–∞–≥—Ä—É–∂–µ–Ω: ${file.created_at_formatted}</small>
                                </div>
                                <div class="btn-group btn-group-sm">
                                    <button class="btn btn-outline-primary" onclick="fileManager.downloadFile('${file.stored_name}')">
                                        <i class="bi bi-download"></i>
                                    </button>
                                    <button class="btn btn-outline-success" onclick="fileManager.shareFile(${file.id})">
                                        <i class="bi bi-share"></i>
                                    </button>
                                    <button class="btn btn-outline-danger" onclick="fileManager.deleteFile(${file.id})">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `).join('');
            } else {
                container.innerHTML = '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤</div>';
            }
        } catch (error) {
            container.innerHTML = '<div class="alert alert-danger">–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</div>';
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    async sendMessage() {
        const input = document.getElementById('messageInput');
        const content = input.value.trim();
        
        if (!content || !this.currentConversationId) return;
        
        input.value = '';
        
        try {
            const response = await fetch(`/api/conversations/${this.currentConversationId}/messages`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ content })
            });
            
            if (response.ok) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
                await this.loadConversations();
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
                await this.loadMessages(this.currentConversationId);
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                if (window.applyMessageStyles) {
                    setTimeout(() => window.applyMessageStyles(), 100);
                }
            } else {
                this.showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
            }
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç (–¥–ª—è WebSocket)
    addMessageToChat(message) {
        const container = document.getElementById('messagesList');
        
        // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        let messageHtml = '';
        let messageClass = 'message-card';
        
        if (message.message_type === 'file') {
            messageClass += ' message-file';
            messageHtml = `
                <div class="d-flex align-items-center">
                    <i class="bi bi-file-earmark me-2"></i>
                    <div class="flex-grow-1">
                        <strong>${message.file_name}</strong>
                        <small class="text-muted d-block">${message.file_size_formatted}</small>
                    </div>
                    <a href="/download/${message.stored_name}" class="btn btn-sm btn-outline-primary" target="_blank">
                        <i class="bi bi-download"></i>
                    </a>
                </div>
            `;
        } else if (message.message_type === 'note') {
            messageClass += ' message-note';
            messageHtml = `
                <div class="d-flex align-items-start">
                    <i class="bi bi-journal-text me-2"></i>
                    <div class="flex-grow-1">
                        <strong style="color: ${message.note_color}">${message.note_title}</strong>
                        <div class="text-muted small">${message.note_content}</div>
                    </div>
                </div>
            `;
        } else if (message.message_type === 'image') {
            messageClass += ' message-image';
            messageHtml = `
                <div class="image-message">
                    <div class="d-flex align-items-center mb-2">
                        <i class="bi bi-image me-2"></i>
                        <div class="flex-grow-1">
                            <strong>${message.file_name}</strong>
                            <small class="text-muted d-block">${message.file_size_formatted}</small>
                        </div>
                        <a href="/download/${message.stored_name}" class="btn btn-sm btn-outline-primary" target="_blank">
                            <i class="bi bi-eye"></i>
                        </a>
                    </div>
                    <div class="image-preview-container">
                        <img src="/download/${message.stored_name}" 
                             class="img-fluid rounded" 
                             style="max-width: 300px; max-height: 200px; cursor: pointer;"
                             onclick="uiManager.showImageModal('${message.stored_name}', '${message.file_name}')"
                             onerror="this.style.display='none'">
                    </div>
                </div>
            `;
        } else if (message.message_type === 'voice') {
            messageClass += ' message-voice';
            messageHtml = `
                <div class="voice-message">
                    <div class="voice-controls">
                        <button class="btn btn-sm btn-outline-primary" onclick="voiceManager.playVoiceMessage('${message.stored_name}')">
                            <i class="bi bi-play-circle"></i>
                        </button>
                        <div class="voice-waveform"></div>
                        <span class="voice-duration">0:00</span>
                    </div>
                    <div class="mt-2">
                        <small class="text-muted">
                            <i class="bi bi-mic"></i> –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        </small>
                    </div>
                </div>
            `;
        } else {
            messageHtml = message.content;
        }
        
        const isCurrentUser = message.sender_id === this.currentUserId;
        const messageElement = document.createElement('div');
        messageElement.className = `${messageClass} ${isCurrentUser ? 'text-end' : 'text-start'}`;
        messageElement.innerHTML = `
            <div class="message-container position-relative" 
                 oncontextmenu="uiManager.showMessageContextMenu(event, ${message.id}, ${isCurrentUser})">
                <div class="small text-muted mb-1">${message.sender_username}</div>
                <div>${messageHtml}</div>
                <div class="small text-muted mt-1">${message.created_at_formatted}</div>
                
                <!-- –†–µ–∞–∫—Ü–∏–∏ -->
                <div class="message-reactions mt-2" id="reactions-${message.id}">
                    <!-- –†–µ–∞–∫—Ü–∏–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–¥–µ—Å—å -->
                </div>
                
                <!-- –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏ -->
                <div class="reaction-btn" onclick="reactionManager.showReactionPicker(${message.id})" style="opacity: 0.5; cursor: pointer;">
                    <i class="bi bi-emoji-smile"></i>
                </div>
            </div>
        `;
        
        container.appendChild(messageElement);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏
        reactionManager.loadReactions(message.id);
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        this.scrollToBottom();
    }

    // –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
    showError(message) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º UI Manager –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–æ–∫
        if (window.uiManager) {
            uiManager.showError(message);
        } else {
            alert(message);
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.chatManager = new ChatManager();
