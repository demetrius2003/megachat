// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏
class ReactionManager {
    constructor() {
        this.reactionPicker = null;
        this.currentOutsideClickHandler = null;
    }

    // –ü–æ–∫–∞–∑ –ø–∏–∫–µ—Ä–∞ —Ä–µ–∞–∫—Ü–∏–π
    showReactionPicker(messageId) {
        console.log('üé≠ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∏–∫–µ—Ä —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:', messageId);
        this.hideReactionPicker();
        
        this.reactionPicker = document.createElement('div');
        this.reactionPicker.className = 'reaction-picker';
        this.reactionPicker.id = `reaction-picker-${messageId}`;
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        this.reactionPicker.style.position = 'absolute';
        this.reactionPicker.style.bottom = '100%';
        this.reactionPicker.style.right = '0';
        this.reactionPicker.style.background = 'white';
        this.reactionPicker.style.border = '1px solid #dee2e6';
        this.reactionPicker.style.borderRadius = '0.5rem';
        this.reactionPicker.style.padding = '0.5rem';
        this.reactionPicker.style.boxShadow = '0 0.5rem 1rem rgba(0, 0, 0, 0.15)';
        this.reactionPicker.style.zIndex = '1000';
        this.reactionPicker.style.display = 'block';
        this.reactionPicker.style.maxWidth = '300px';
        this.reactionPicker.style.maxHeight = '200px';
        this.reactionPicker.style.overflowY = 'auto';
        
        console.log('üé≠ –°–æ–∑–¥–∞–Ω –ø–∏–∫–µ—Ä —Ä–µ–∞–∫—Ü–∏–π —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏');
        
        const emojis = ['üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÇ', 'üòä', 'üòç', 'ü§î', 'üòé', 'üò¥', 'üò¢', 'üëç', 'üëé', 'üëå', '‚úåÔ∏è', 'ü§ù', 'üëè', 'üôå', 'ü§û', '‚ù§Ô∏è', 'üíô', 'üíö', 'üíõ', 'üíú', 'üñ§', 'ü§ç', 'üíî', 'üéâ', 'üéä', 'üéà', 'üéÅ', 'üéÇ', 'üç∞', 'üåû', 'üåô', '‚≠ê', 'üåü', 'üåà', '‚òÄÔ∏è', 'üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº'];
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —ç–º–æ–¥–∑–∏
        emojis.forEach((emoji, index) => {
            const button = document.createElement('button');
            button.className = 'btn btn-sm btn-outline-secondary me-1 mb-1 emoji-reaction-btn';
            button.textContent = emoji;
            button.type = 'button';
            button.dataset.emoji = emoji;
            button.dataset.messageId = messageId;
            button.id = `reaction-btn-${messageId}-${index}`;
            
            this.reactionPicker.appendChild(button);
            console.log(`üé≠ –°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ ${emoji} —Å ID: ${button.id}`);
        });
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤
        this.reactionPicker.addEventListener('click', (e) => {
            const button = e.target.closest('.emoji-reaction-btn');
            if (button) {
                const emoji = button.dataset.emoji;
                const msgId = button.dataset.messageId;
                console.log(`üé≠ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Ä–µ–∞–∫—Ü–∏–∏ (–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ): ${emoji}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${msgId}`);
                e.preventDefault();
                e.stopPropagation();
                
                // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                if (window.reactionManager) {
                    window.reactionManager.addReaction(parseInt(msgId), emoji);
                } else {
                    console.error('‚ùå reactionManager –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                }
            }
        });
        
        const messageElement = document.querySelector(`[oncontextmenu*="${messageId}"]`);
        if (messageElement) {
            messageElement.appendChild(this.reactionPicker);
        }
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –ø–∏–∫–µ—Ä–∞
        const outsideClickHandler = (e) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –±—ã–ª –Ω–µ –ø–æ –ø–∏–∫–µ—Ä—É –∏ –Ω–µ –ø–æ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
            if (this.reactionPicker && !this.reactionPicker.contains(e.target)) {
                console.log('üé≠ –ö–ª–∏–∫ –≤–Ω–µ –ø–∏–∫–µ—Ä–∞ —Ä–µ–∞–∫—Ü–∏–π - –∑–∞–∫—Ä—ã–≤–∞–µ–º');
                this.hideReactionPicker();
            }
        };
        
        setTimeout(() => {
            document.addEventListener('click', outsideClickHandler);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            this.currentOutsideClickHandler = outsideClickHandler;
        }, 100);
    }

    // –°–∫—Ä—ã—Ç–∏–µ –ø–∏–∫–µ—Ä–∞ —Ä–µ–∞–∫—Ü–∏–π
    hideReactionPicker() {
        console.log('üé≠ –°–∫—Ä—ã–≤–∞–µ–º –ø–∏–∫–µ—Ä —Ä–µ–∞–∫—Ü–∏–π');
        if (this.reactionPicker) {
            this.reactionPicker.remove();
            this.reactionPicker = null;
        }
        
        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª–∏–∫–æ–≤
        if (this.currentOutsideClickHandler) {
            document.removeEventListener('click', this.currentOutsideClickHandler);
            this.currentOutsideClickHandler = null;
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏
    async addReaction(messageId, emoji) {
        console.log('üé≠ –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é:', emoji, '–∫ —Å–æ–æ–±—â–µ–Ω–∏—é:', messageId);
        try {
            const response = await fetch(`/api/messages/${messageId}/reactions`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ emoji })
            });
            
            if (response.ok) {
                await this.loadReactions(messageId);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏:', error);
        }
        
        this.hideReactionPicker();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–∫—Ü–∏–π
    async loadReactions(messageId) {
        try {
            const response = await fetch(`/api/messages/${messageId}/reactions`);
            if (response.ok) {
                const reactions = await response.json();
                this.renderReactions(messageId, reactions);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∞–∫—Ü–∏–π:', error);
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π
    renderReactions(messageId, reactions) {
        const container = document.getElementById(`reactions-${messageId}`);
        if (!container) return;
        
        if (reactions.length === 0) {
            container.innerHTML = '';
            return;
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ —ç–º–æ–¥–∑–∏
        const groupedReactions = {};
        reactions.forEach(reaction => {
            if (!groupedReactions[reaction.emoji]) {
                groupedReactions[reaction.emoji] = [];
            }
            groupedReactions[reaction.emoji].push(reaction);
        });
        
        container.innerHTML = Object.entries(groupedReactions).map(([emoji, reactionList]) => {
            const count = reactionList.length;
            const hasUserReaction = reactionList.some(r => r.user_id === chatManager.currentUserId);
            
            return `
                <span class="reaction ${hasUserReaction ? 'user-reaction' : ''}" 
                      onclick="reactionManager.toggleReaction(${messageId}, '${emoji}')">
                    ${emoji} ${count}
                </span>
            `;
        }).join('');
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏
    async toggleReaction(messageId, emoji) {
        try {
            const response = await fetch(`/api/messages/${messageId}/reactions`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ emoji })
            });
            
            if (response.ok) {
                await this.loadReactions(messageId);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏:', error);
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.reactionManager = new ReactionManager();
