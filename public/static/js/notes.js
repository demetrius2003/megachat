// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
class NoteManager {
    constructor() {
        this.notes = [];
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫
    async loadNotes() {
        try {
            const response = await fetch('/api/notes');
            if (response.ok) {
                this.notes = await response.json();
                return this.notes;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–º–µ—Ç–æ–∫:', error);
        }
        return [];
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    async loadNoteForEdit(noteId) {
        try {
            const response = await fetch('/api/notes');
            if (response.ok) {
                const notes = await response.json();
                const note = notes.find(n => n.id === noteId);
                if (note) {
                    document.getElementById('noteTitle').value = note.title;
                    document.getElementById('noteContent').value = note.content;
                    document.getElementById('noteColor').value = note.color;
                    document.getElementById('noteModalTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É';
                    document.getElementById('noteSaveBtn').textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
                    document.getElementById('noteSaveBtn').onclick = () => this.updateNote(noteId);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–º–µ—Ç–∫–∏:', error);
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
    async createNote() {
        console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏...');
        const title = document.getElementById('noteTitle').value.trim();
        const content = document.getElementById('noteContent').value.trim();
        const color = document.getElementById('noteColor').value;
        
        console.log('üìù –î–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏:', { title, content, color });
        
        if (!title) {
            console.log('üìù –û—à–∏–±–∫–∞: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—É—Å—Ç–æ–π');
            uiManager.showError('–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏');
            return;
        }
        
        try {
            console.log('üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...');
            const response = await fetch('/api/notes', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ title, content, color })
            });
            
            console.log('üìù –û—Ç–≤–µ—Ç API:', response.status);
            
            if (response.ok) {
                const result = await response.json();
                console.log('üìù –†–µ–∑—É–ª—å—Ç–∞—Ç API:', result);
                if (result.success) {
                    console.log('üìù –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
                    uiManager.showSuccess('–ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞');
                    bootstrap.Modal.getInstance(document.getElementById('noteModal')).hide();
                    document.getElementById('noteForm').reset();
                    await chatManager.loadConversations();
                } else {
                    console.log('üìù –û—à–∏–±–∫–∞: API –≤–µ—Ä–Ω—É–ª success: false');
                    uiManager.showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏');
                }
            } else {
                console.log('üìù –û—à–∏–±–∫–∞: HTTP —Å—Ç–∞—Ç—É—Å', response.status);
                uiManager.showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏');
            }
        } catch (error) {
            console.error('üìù –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:', error);
            uiManager.showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
    async updateNote(noteId) {
        const title = document.getElementById('noteTitle').value.trim();
        const content = document.getElementById('noteContent').value.trim();
        const color = document.getElementById('noteColor').value;
        
        if (!title) {
            uiManager.showError('–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏');
            return;
        }
        
        try {
            const response = await fetch(`/api/notes/${noteId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ title, content, color })
            });
            
            if (response.ok) {
                uiManager.showSuccess('–ó–∞–º–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
                bootstrap.Modal.getInstance(document.getElementById('noteModal')).hide();
                await chatManager.loadConversations();
            } else {
                uiManager.showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:', error);
            uiManager.showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
    async deleteNote(noteId) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–º–µ—Ç–∫—É?')) {
            return;
        }
        
        try {
            const response = await fetch(`/api/notes/${noteId}`, {
                method: 'DELETE'
            });
            
            if (response.ok) {
                uiManager.showSuccess('–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
                await chatManager.loadConversations();
            } else {
                uiManager.showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:', error);
            uiManager.showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        }
    }

    // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∑–∞–º–µ—Ç–∫–æ–π
    async shareNote(noteId) {
        if (chatManager.currentConversationId) {
            try {
                const response = await fetch(`/api/conversations/${chatManager.currentConversationId}/messages`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        note_id: noteId,
                        message_type: 'note'
                    })
                });
                
                if (response.ok) {
                    uiManager.showSuccess('–ó–∞–º–µ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç');
                    await chatManager.loadConversations();
                } else {
                    uiManager.showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–º–µ—Ç–∫–∏');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–º–µ—Ç–∫–∏:', error);
                uiManager.showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
            }
        } else {
            uiManager.showError('–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.noteManager = new NoteManager();
