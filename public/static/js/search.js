// –ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞
class SearchManager {
    constructor() {
        this.selectedParticipants = [];
    }

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async searchUsers(query) {
        console.log('searchUsers –≤—ã–∑–≤–∞–Ω–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º:', query); // –û—Ç–ª–∞–¥–∫–∞
        
        if (query.length < 2) {
            document.getElementById('searchResults').style.display = 'none';
            return;
        }
        
        try {
            console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...'); // –û—Ç–ª–∞–¥–∫–∞
            const response = await fetch(`/api/users/search?q=${encodeURIComponent(query)}`);
            console.log('–û—Ç–≤–µ—Ç API:', response.status); // –û—Ç–ª–∞–¥–∫–∞
            
            if (response.ok) {
                const users = await response.json();
                console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', users); // –û—Ç–ª–∞–¥–∫–∞
                this.renderSearchResults(users);
            } else {
                console.error('–û—à–∏–±–∫–∞ API:', response.status, response.statusText);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    renderSearchResults(users) {
        // console.log('renderSearchResults –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:', users); // –û—Ç–ª–∞–¥–∫–∞
        
        const container = document.getElementById('searchResultsList');
        const searchResults = document.getElementById('searchResults');
        
        // console.log('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–∞–π–¥–µ–Ω—ã:', { container: !!container, searchResults: !!searchResults }); // –û—Ç–ª–∞–¥–∫–∞
        
        if (users.length === 0) {
            container.innerHTML = '<div class="list-group-item text-muted">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        } else {
            container.innerHTML = users.map(user => `
                <div class="list-group-item list-group-item-action" data-user-id="${user.id}" data-username="${user.username}">
                    <div class="d-flex w-100 justify-content-between">
                        <h6 class="mb-1">${user.username}</h6>
                        <small class="text-muted">${user.status === 'online' ? 'üü¢' : '‚ö´'}</small>
                    </div>
                    <p class="mb-1 text-muted small">${user.email || '–ù–µ—Ç email'}</p>
                </div>
            `).join('');
        }
        
        searchResults.style.display = 'block';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const items = container.querySelectorAll('.list-group-item-action');
        items.forEach(item => {
            item.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                const userId = parseInt(this.getAttribute('data-user-id'));
                const username = this.getAttribute('data-username');
                console.log('üî¥ –ö–õ–ò–ö –ü–û –£–ß–ê–°–¢–ù–ò–ö–£ (search.js):', userId, username);
                searchManager.addParticipant(userId, username);
            });
        });
        
        // console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã'); // –û—Ç–ª–∞–¥–∫–∞
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    addParticipant(userId, username) {
        console.log('üî¥ addParticipant –≤—ã–∑–≤–∞–Ω–∞ (search.js):', userId, username); // –û—Ç–ª–∞–¥–∫–∞
        
        if (!this.selectedParticipants.find(p => p.id === userId)) {
            this.selectedParticipants.push({ id: userId, username: username });
            console.log('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω (search.js):', this.selectedParticipants); // –û—Ç–ª–∞–¥–∫–∞
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if (window.selectedParticipants) {
                window.selectedParticipants = [...this.selectedParticipants];
            }
            
            this.renderSelectedParticipants();
        } else {
            console.log('‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω (search.js)'); // –û—Ç–ª–∞–¥–∫–∞
        }
        
        document.getElementById('participantsSearch').value = '';
        document.getElementById('searchResults').style.display = 'none';
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    removeParticipant(userId) {
        this.selectedParticipants = this.selectedParticipants.filter(p => p.id !== userId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (window.selectedParticipants) {
            window.selectedParticipants = [...this.selectedParticipants];
        }
        
        this.renderSelectedParticipants();
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    renderSelectedParticipants() {
        // console.log('renderSelectedParticipants –≤—ã–∑–≤–∞–Ω–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏:', this.selectedParticipants); // –û—Ç–ª–∞–¥–∫–∞
        
        const container = document.getElementById('selectedParticipants');
        // console.log('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω:', !!container); // –û—Ç–ª–∞–¥–∫–∞
        
        if (this.selectedParticipants.length === 0) {
            container.innerHTML = '<div class="list-group-item text-muted">–£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã</div>';
        } else {
            container.innerHTML = this.selectedParticipants.map(participant => `
                <div class="list-group-item d-flex justify-content-between align-items-center">
                    <span>${participant.username}</span>
                    <button type="button" class="btn btn-sm btn-outline-danger" data-participant-id="${participant.id}">
                        <i class="bi bi-x"></i>
                    </button>
                </div>
            `).join('');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
            container.querySelectorAll('button[data-participant-id]').forEach(button => {
                button.addEventListener('click', function() {
                    const participantId = parseInt(this.getAttribute('data-participant-id'));
                    searchManager.removeParticipant(participantId);
                });
            });
        }
        
        // console.log('–í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã'); // –û—Ç–ª–∞–¥–∫–∞
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞
    async createChat() {
        console.log('üî¥ createChat –≤—ã–∑–≤–∞–Ω–∞ (search.js) —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏:', this.selectedParticipants); // –û—Ç–ª–∞–¥–∫–∞
        
        if (this.selectedParticipants.length === 0) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
            return;
        }
        
        const chatName = document.getElementById('chatName').value.trim();
        const chatDescription = (document.getElementById('chatDescription').value || '').trim();
        
        console.log('üìù –î–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ (search.js):', {
            name: chatName,
            description: chatDescription,
            participants: this.selectedParticipants.map(p => p.id)
        });
        
        try {
            const response = await fetch('/api/conversations', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    name: chatName || '–ù–æ–≤—ã–π —á–∞—Ç',
                    description: chatDescription,
                    participants: this.selectedParticipants.map(p => p.id)
                })
            });
            
            console.log('üì° –û—Ç–≤–µ—Ç API (search.js):', response.status);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            console.log('‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω (search.js):', data);
            
            if (data.success) {
                bootstrap.Modal.getInstance(document.getElementById('newChatModal')).hide();
                document.getElementById('newChatForm').reset();
                this.selectedParticipants = [];
                window.selectedParticipants = [];
                this.renderSelectedParticipants();
                
                console.log('üéâ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω, ID:', data.id);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
                if (window.loadConversations) {
                    await window.loadConversations();
                }
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á–∞—Ç
                if (data.id && window.chatManager) {
                    console.log('üéØ –ê–≤—Ç–æ–≤—ã–±–æ—Ä —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞:', data.id);
                    await chatManager.selectConversation(data.id);
                } else {
                    alert('–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
                }
            } else {
                alert(data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞ (search.js):', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞: ' + error.message);
        }
    }

    // –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    async searchMessages() {
        const query = document.getElementById('messageSearch').value.trim();
        if (!query) {
            uiManager.showError('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
            return;
        }
        
        const searchText = document.getElementById('searchText').checked;
        const searchFiles = document.getElementById('searchFiles').checked;
        const searchNotes = document.getElementById('searchNotes').checked;
        
        if (!searchText && !searchFiles && !searchNotes) {
            uiManager.showError('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø –ø–æ–∏—Å–∫–∞');
            return;
        }
        
        try {
            const response = await fetch('/api/messages/search', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    query: query,
                    search_text: searchText,
                    search_files: searchFiles,
                    search_notes: searchNotes
                })
            });
            
            if (response.ok) {
                const results = await response.json();
                this.showSearchResults(results);
            } else {
                uiManager.showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
            uiManager.showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        }
    }

    // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    showSearchResults(results) {
        console.log('üîç –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', results);
        const container = document.getElementById('messageSearchResults');
        const searchResults = document.getElementById('messageSearchResultsList');
        
        if (!container || !searchResults) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
            uiManager.showError('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞');
            return;
        }
        
        if (results.length === 0) {
            searchResults.innerHTML = '<div class="list-group-item text-muted">–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        } else {
            searchResults.innerHTML = results.map(result => this.formatSearchResult(result)).join('');
        }
        
        container.style.display = 'block';
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        const messageItems = searchResults.querySelectorAll('.list-group-item-action');
        messageItems.forEach(item => {
            item.addEventListener('click', function() {
                const messageId = parseInt(this.getAttribute('data-message-id'));
                const conversationId = parseInt(this.getAttribute('data-conversation-id'));
                searchManager.goToMessage(messageId, conversationId);
            });
        });
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞
    formatSearchResult(result) {
        let content = '';
        let type = '';
        
        if (result.message_type === 'file') {
            content = `üìÅ ${result.file_name}`;
            type = '–§–∞–π–ª';
        } else if (result.message_type === 'note') {
            content = `üìù ${result.note_title}`;
            type = '–ó–∞–º–µ—Ç–∫–∞';
        } else if (result.message_type === 'image') {
            content = `üñºÔ∏è ${result.file_name}`;
            type = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
        } else if (result.message_type === 'voice') {
            content = `üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`;
            type = '–ì–æ–ª–æ—Å–æ–≤–æ–µ';
        } else {
            content = result.content;
            type = '–¢–µ–∫—Å—Ç';
        }
        
        const highlightedContent = this.highlightSearchTerm(content, document.getElementById('messageSearch').value);
        
        return `
            <div class="list-group-item list-group-item-action" data-message-id="${result.message_id}" data-conversation-id="${result.conversation_id}">
                <div class="d-flex w-100 justify-content-between">
                    <h6 class="mb-1">${result.conversation_name}</h6>
                    <small class="text-muted">${type}</small>
                </div>
                <p class="mb-1">${highlightedContent}</p>
                <small class="text-muted">–û—Ç: ${result.sender_username} ‚Ä¢ ${result.created_at_formatted}</small>
            </div>
        `;
    }

    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    highlightSearchTerm(text, query) {
        if (!query) return text;
        const regex = new RegExp(`(${query})`, 'gi');
        return text.replace(regex, '<mark>$1</mark>');
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
    goToMessage(messageId, conversationId) {
        chatManager.selectConversation(conversationId);
        this.clearSearch();
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        setTimeout(() => {
            const messageElement = document.querySelector(`[oncontextmenu*="${messageId}"]`);
            if (messageElement) {
                messageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                messageElement.style.backgroundColor = '#fff3cd';
                setTimeout(() => {
                    messageElement.style.backgroundColor = '';
                }, 3000);
            }
        }, 500);
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
    clearSearch() {
        document.getElementById('messageSearch').value = '';
        document.getElementById('searchResults').style.display = 'none';
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.searchManager = new SearchManager();
